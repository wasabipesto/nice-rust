<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="613.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="613.00"> </text><svg id="frames" x="10" width="1180" total_samples="20164"><g><title>[libc-2.31.so] (4 samples, 0.02%)</title><rect x="0.0000%" y="533" width="0.0198%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (13 samples, 0.06%)</title><rect x="0.0198%" y="533" width="0.0645%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="13"/><text x="0.2698%" y="543.50"></text></g><g><title>malachite_nz::natural::Natural::demote_if_small (14 samples, 0.07%)</title><rect x="0.0843%" y="533" width="0.0694%" height="15" fill="rgb(221,193,54)" fg:x="17" fg:w="14"/><text x="0.3343%" y="543.50"></text></g><g><title>[[heap]] (46 samples, 0.23%)</title><rect x="0.0000%" y="549" width="0.2281%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="46"/><text x="0.2500%" y="559.50"></text></g><g><title>malachite_nz::natural::arithmetic::pow::limbs_pow (15 samples, 0.07%)</title><rect x="0.1537%" y="533" width="0.0744%" height="15" fill="rgb(208,68,35)" fg:x="31" fg:w="15"/><text x="0.4037%" y="543.50"></text></g><g><title>[libc-2.31.so] (30 samples, 0.15%)</title><rect x="0.2281%" y="533" width="0.1488%" height="15" fill="rgb(232,128,0)" fg:x="46" fg:w="30"/><text x="0.4781%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (9 samples, 0.04%)</title><rect x="0.3769%" y="533" width="0.0446%" height="15" fill="rgb(207,160,47)" fg:x="76" fg:w="9"/><text x="0.6269%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (9 samples, 0.04%)</title><rect x="0.3769%" y="517" width="0.0446%" height="15" fill="rgb(228,23,34)" fg:x="76" fg:w="9"/><text x="0.6269%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.04%)</title><rect x="0.4215%" y="533" width="0.0446%" height="15" fill="rgb(218,30,26)" fg:x="85" fg:w="9"/><text x="0.6715%" y="543.50"></text></g><g><title>cfree (8 samples, 0.04%)</title><rect x="0.4662%" y="533" width="0.0397%" height="15" fill="rgb(220,122,19)" fg:x="94" fg:w="8"/><text x="0.7162%" y="543.50"></text></g><g><title>malachite_nz::natural::Natural::demote_if_small (7 samples, 0.03%)</title><rect x="0.5059%" y="533" width="0.0347%" height="15" fill="rgb(250,228,42)" fg:x="102" fg:w="7"/><text x="0.7559%" y="543.50"></text></g><g><title>malachite_nz::natural::arithmetic::add::&lt;impl core::ops::arith::AddAssign for malachite_nz::natural::Natural&gt;::add_assign (4 samples, 0.02%)</title><rect x="0.5406%" y="533" width="0.0198%" height="15" fill="rgb(240,193,28)" fg:x="109" fg:w="4"/><text x="0.7906%" y="543.50"></text></g><g><title>malachite_nz::natural::arithmetic::div_mod::&lt;impl malachite_nz::natural::Natural&gt;::div_assign_mod_limb (319 samples, 1.58%)</title><rect x="0.5604%" y="533" width="1.5820%" height="15" fill="rgb(216,20,37)" fg:x="113" fg:w="319"/><text x="0.8104%" y="543.50"></text></g><g><title>malachite_nz::natural::Natural::trim (25 samples, 0.12%)</title><rect x="2.0184%" y="517" width="0.1240%" height="15" fill="rgb(206,188,39)" fg:x="407" fg:w="25"/><text x="2.2684%" y="527.50"></text></g><g><title>malachite_nz::natural::Natural::demote_if_small (25 samples, 0.12%)</title><rect x="2.0184%" y="501" width="0.1240%" height="15" fill="rgb(217,207,13)" fg:x="407" fg:w="25"/><text x="2.2684%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;malachite_nz::natural::Natural&gt; (25 samples, 0.12%)</title><rect x="2.0184%" y="485" width="0.1240%" height="15" fill="rgb(231,73,38)" fg:x="407" fg:w="25"/><text x="2.2684%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;malachite_nz::natural::InnerNatural&gt; (25 samples, 0.12%)</title><rect x="2.0184%" y="469" width="0.1240%" height="15" fill="rgb(225,20,46)" fg:x="407" fg:w="25"/><text x="2.2684%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u64&gt;&gt; (25 samples, 0.12%)</title><rect x="2.0184%" y="453" width="0.1240%" height="15" fill="rgb(210,31,41)" fg:x="407" fg:w="25"/><text x="2.2684%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u64&gt;&gt; (25 samples, 0.12%)</title><rect x="2.0184%" y="437" width="0.1240%" height="15" fill="rgb(221,200,47)" fg:x="407" fg:w="25"/><text x="2.2684%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.12%)</title><rect x="2.0184%" y="421" width="0.1240%" height="15" fill="rgb(226,26,5)" fg:x="407" fg:w="25"/><text x="2.2684%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (25 samples, 0.12%)</title><rect x="2.0184%" y="405" width="0.1240%" height="15" fill="rgb(249,33,26)" fg:x="407" fg:w="25"/><text x="2.2684%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (25 samples, 0.12%)</title><rect x="2.0184%" y="389" width="0.1240%" height="15" fill="rgb(235,183,28)" fg:x="407" fg:w="25"/><text x="2.2684%" y="399.50"></text></g><g><title>[[stack]] (408 samples, 2.02%)</title><rect x="0.2281%" y="549" width="2.0234%" height="15" fill="rgb(221,5,38)" fg:x="46" fg:w="408"/><text x="0.4781%" y="559.50">[..</text></g><g><title>malachite_nz::natural::arithmetic::pow::&lt;impl malachite_base::num::arithmetic::traits::Pow&lt;u64&gt; for &amp;malachite_nz::natural::Natural&gt;::pow (22 samples, 0.11%)</title><rect x="2.1424%" y="533" width="0.1091%" height="15" fill="rgb(247,18,42)" fg:x="432" fg:w="22"/><text x="2.3924%" y="543.50"></text></g><g><title>[anon] (212 samples, 1.05%)</title><rect x="2.2515%" y="549" width="1.0514%" height="15" fill="rgb(241,131,45)" fg:x="454" fg:w="212"/><text x="2.5015%" y="559.50"></text></g><g><title>malachite_nz::natural::arithmetic::div_mod::&lt;impl malachite_base::num::arithmetic::traits::DivAssignMod&lt;&amp;malachite_nz::natural::Natural&gt; for malachite_nz::natural::Natural&gt;::div_assign_mod (212 samples, 1.05%)</title><rect x="2.2515%" y="533" width="1.0514%" height="15" fill="rgb(249,31,29)" fg:x="454" fg:w="212"/><text x="2.5015%" y="543.50"></text></g><g><title>__libc_malloc (6 samples, 0.03%)</title><rect x="3.3079%" y="533" width="0.0298%" height="15" fill="rgb(225,111,53)" fg:x="667" fg:w="6"/><text x="3.5579%" y="543.50"></text></g><g><title>[nice-rust] (72 samples, 0.36%)</title><rect x="3.3079%" y="549" width="0.3571%" height="15" fill="rgb(238,160,17)" fg:x="667" fg:w="72"/><text x="3.5579%" y="559.50"></text></g><g><title>malachite_nz::natural::arithmetic::div_mod::&lt;impl malachite_nz::natural::Natural&gt;::div_assign_mod_limb (66 samples, 0.33%)</title><rect x="3.3376%" y="533" width="0.3273%" height="15" fill="rgb(214,148,48)" fg:x="673" fg:w="66"/><text x="3.5876%" y="543.50"></text></g><g><title>[libc-2.31.so] (92 samples, 0.46%)</title><rect x="3.6649%" y="533" width="0.4563%" height="15" fill="rgb(232,36,49)" fg:x="739" fg:w="92"/><text x="3.9149%" y="543.50"></text></g><g><title>[nice-rust] (4 samples, 0.02%)</title><rect x="4.1212%" y="533" width="0.0198%" height="15" fill="rgb(209,103,24)" fg:x="831" fg:w="4"/><text x="4.3712%" y="543.50"></text></g><g><title>__libc_malloc (4 samples, 0.02%)</title><rect x="4.1212%" y="517" width="0.0198%" height="15" fill="rgb(229,88,8)" fg:x="831" fg:w="4"/><text x="4.3712%" y="527.50"></text></g><g><title>__libc_calloc (28 samples, 0.14%)</title><rect x="4.1410%" y="533" width="0.1389%" height="15" fill="rgb(213,181,19)" fg:x="835" fg:w="28"/><text x="4.3910%" y="543.50"></text></g><g><title>__libc_malloc (22 samples, 0.11%)</title><rect x="4.2799%" y="533" width="0.1091%" height="15" fill="rgb(254,191,54)" fg:x="863" fg:w="22"/><text x="4.5299%" y="543.50"></text></g><g><title>__rdl_alloc_zeroed (8 samples, 0.04%)</title><rect x="4.3940%" y="533" width="0.0397%" height="15" fill="rgb(241,83,37)" fg:x="886" fg:w="8"/><text x="4.6440%" y="543.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (8 samples, 0.04%)</title><rect x="4.3940%" y="517" width="0.0397%" height="15" fill="rgb(233,36,39)" fg:x="886" fg:w="8"/><text x="4.6440%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (9 samples, 0.04%)</title><rect x="4.4336%" y="533" width="0.0446%" height="15" fill="rgb(226,3,54)" fg:x="894" fg:w="9"/><text x="4.6836%" y="543.50"></text></g><g><title>cfree (7 samples, 0.03%)</title><rect x="4.4783%" y="533" width="0.0347%" height="15" fill="rgb(245,192,40)" fg:x="903" fg:w="7"/><text x="4.7283%" y="543.50"></text></g><g><title>malachite_nz::natural::arithmetic::add::&lt;impl core::ops::arith::AddAssign for malachite_nz::natural::Natural&gt;::add_assign (12 samples, 0.06%)</title><rect x="4.5130%" y="533" width="0.0595%" height="15" fill="rgb(238,167,29)" fg:x="910" fg:w="12"/><text x="4.7630%" y="543.50"></text></g><g><title>malachite_nz::natural::arithmetic::div_mod::&lt;impl malachite_base::num::arithmetic::traits::DivAssignMod&lt;&amp;malachite_nz::natural::Natural&gt; for malachite_nz::natural::Natural&gt;::div_assign_mod (1,455 samples, 7.22%)</title><rect x="4.5725%" y="533" width="7.2158%" height="15" fill="rgb(232,182,51)" fg:x="922" fg:w="1455"/><text x="4.8225%" y="543.50">malachite_..</text></g><g><title>malachite_nz::natural::arithmetic::div_mod::&lt;impl malachite_nz::natural::Natural&gt;::div_assign_mod_limb (548 samples, 2.72%)</title><rect x="11.7883%" y="533" width="2.7177%" height="15" fill="rgb(231,60,39)" fg:x="2377" fg:w="548"/><text x="12.0383%" y="543.50">ma..</text></g><g><title>malachite_nz::natural::arithmetic::div_mod::limbs_div_limb_in_place_mod (623 samples, 3.09%)</title><rect x="14.5061%" y="533" width="3.0897%" height="15" fill="rgb(208,69,12)" fg:x="2925" fg:w="623"/><text x="14.7561%" y="543.50">mal..</text></g><g><title>malachite_nz::natural::arithmetic::div_mod::limbs_invert_limb (46 samples, 0.23%)</title><rect x="17.3676%" y="517" width="0.2281%" height="15" fill="rgb(235,93,37)" fg:x="3502" fg:w="46"/><text x="17.6176%" y="527.50"></text></g><g><title>malachite_nz::natural::arithmetic::pow::&lt;impl malachite_base::num::arithmetic::traits::Pow&lt;u64&gt; for &amp;malachite_nz::natural::Natural&gt;::pow (19 samples, 0.09%)</title><rect x="17.5957%" y="533" width="0.0942%" height="15" fill="rgb(213,116,39)" fg:x="3548" fg:w="19"/><text x="17.8457%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (4 samples, 0.02%)</title><rect x="17.7990%" y="501" width="0.0198%" height="15" fill="rgb(222,207,29)" fg:x="3589" fg:w="4"/><text x="18.0490%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (4 samples, 0.02%)</title><rect x="17.7990%" y="485" width="0.0198%" height="15" fill="rgb(206,96,30)" fg:x="3589" fg:w="4"/><text x="18.0490%" y="495.50"></text></g><g><title>alloc::vec::from_elem (3 samples, 0.01%)</title><rect x="17.8189%" y="501" width="0.0149%" height="15" fill="rgb(218,138,4)" fg:x="3593" fg:w="3"/><text x="18.0689%" y="511.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (3 samples, 0.01%)</title><rect x="17.8189%" y="485" width="0.0149%" height="15" fill="rgb(250,191,14)" fg:x="3593" fg:w="3"/><text x="18.0689%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (3 samples, 0.01%)</title><rect x="17.8189%" y="469" width="0.0149%" height="15" fill="rgb(239,60,40)" fg:x="3593" fg:w="3"/><text x="18.0689%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.01%)</title><rect x="17.8189%" y="453" width="0.0149%" height="15" fill="rgb(206,27,48)" fg:x="3593" fg:w="3"/><text x="18.0689%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (3 samples, 0.01%)</title><rect x="17.8189%" y="437" width="0.0149%" height="15" fill="rgb(225,35,8)" fg:x="3593" fg:w="3"/><text x="18.0689%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.01%)</title><rect x="17.8189%" y="421" width="0.0149%" height="15" fill="rgb(250,213,24)" fg:x="3593" fg:w="3"/><text x="18.0689%" y="431.50"></text></g><g><title>alloc::alloc::alloc_zeroed (3 samples, 0.01%)</title><rect x="17.8189%" y="405" width="0.0149%" height="15" fill="rgb(247,123,22)" fg:x="3593" fg:w="3"/><text x="18.0689%" y="415.50"></text></g><g><title>malachite_nz::natural::arithmetic::pow::limbs_pow (36 samples, 0.18%)</title><rect x="17.6899%" y="533" width="0.1785%" height="15" fill="rgb(231,138,38)" fg:x="3567" fg:w="36"/><text x="17.9399%" y="543.50"></text></g><g><title>malachite_nz::natural::arithmetic::pow::limbs_pow_to_out (17 samples, 0.08%)</title><rect x="17.7842%" y="517" width="0.0843%" height="15" fill="rgb(231,145,46)" fg:x="3586" fg:w="17"/><text x="18.0342%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u64&gt;&gt; (7 samples, 0.03%)</title><rect x="17.8338%" y="501" width="0.0347%" height="15" fill="rgb(251,118,11)" fg:x="3596" fg:w="7"/><text x="18.0838%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u64&gt;&gt; (7 samples, 0.03%)</title><rect x="17.8338%" y="485" width="0.0347%" height="15" fill="rgb(217,147,25)" fg:x="3596" fg:w="7"/><text x="18.0838%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.03%)</title><rect x="17.8338%" y="469" width="0.0347%" height="15" fill="rgb(247,81,37)" fg:x="3596" fg:w="7"/><text x="18.0838%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.03%)</title><rect x="17.8338%" y="453" width="0.0347%" height="15" fill="rgb(209,12,38)" fg:x="3596" fg:w="7"/><text x="18.0838%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.03%)</title><rect x="17.8338%" y="437" width="0.0347%" height="15" fill="rgb(227,1,9)" fg:x="3596" fg:w="7"/><text x="18.0838%" y="447.50"></text></g><g><title>malachite_nz::natural::arithmetic::square::limbs_square_to_out (3 samples, 0.01%)</title><rect x="17.8685%" y="533" width="0.0149%" height="15" fill="rgb(248,47,43)" fg:x="3603" fg:w="3"/><text x="18.1185%" y="543.50"></text></g><g><title>malachite_nz::natural::arithmetic::square::limbs_square_to_out_basecase (41 samples, 0.20%)</title><rect x="17.8834%" y="533" width="0.2033%" height="15" fill="rgb(221,10,30)" fg:x="3606" fg:w="41"/><text x="18.1334%" y="543.50"></text></g><g><title>malachite_nz::natural::comparison::partial_cmp_primitive_int::&lt;impl core::cmp::PartialOrd&lt;i32&gt; for malachite_nz::natural::Natural&gt;::partial_cmp (135 samples, 0.67%)</title><rect x="18.0966%" y="533" width="0.6695%" height="15" fill="rgb(210,229,1)" fg:x="3649" fg:w="135"/><text x="18.3466%" y="543.50"></text></g><g><title>malachite_nz::natural::conversion::primitive_int_from_natural::&lt;impl core::convert::TryFrom&lt;&amp;malachite_nz::natural::Natural&gt; for usize&gt;::try_from (19 samples, 0.09%)</title><rect x="18.7661%" y="533" width="0.0942%" height="15" fill="rgb(222,148,37)" fg:x="3784" fg:w="19"/><text x="19.0161%" y="543.50"></text></g><g><title>core::cmp::PartialOrd::gt (302 samples, 1.50%)</title><rect x="19.5299%" y="517" width="1.4977%" height="15" fill="rgb(234,67,33)" fg:x="3938" fg:w="302"/><text x="19.7799%" y="527.50"></text></g><g><title>malachite_nz::natural::arithmetic::div_mod::&lt;impl malachite_base::num::arithmetic::traits::DivAssignRem&lt;&amp;malachite_nz::natural::Natural&gt; for malachite_nz::natural::Natural&gt;::div_assign_rem (259 samples, 1.28%)</title><rect x="21.0375%" y="517" width="1.2845%" height="15" fill="rgb(247,98,35)" fg:x="4242" fg:w="259"/><text x="21.2875%" y="527.50"></text></g><g><title>[unknown] (3,767 samples, 18.68%)</title><rect x="3.6649%" y="549" width="18.6818%" height="15" fill="rgb(247,138,52)" fg:x="739" fg:w="3767"/><text x="3.9149%" y="559.50">[unknown]</text></g><g><title>nice_rust::nice_process::process_detailed_natural (703 samples, 3.49%)</title><rect x="18.8603%" y="533" width="3.4864%" height="15" fill="rgb(213,79,30)" fg:x="3803" fg:w="703"/><text x="19.1103%" y="543.50">nic..</text></g><g><title>malachite_nz::natural::arithmetic::pow::&lt;impl malachite_base::num::arithmetic::traits::Pow&lt;u64&gt; for &amp;malachite_nz::natural::Natural&gt;::pow (5 samples, 0.02%)</title><rect x="22.3220%" y="517" width="0.0248%" height="15" fill="rgb(246,177,23)" fg:x="4501" fg:w="5"/><text x="22.5720%" y="527.50"></text></g><g><title>malachite_nz::natural::arithmetic::square::&lt;impl malachite_base::num::arithmetic::traits::Square for &amp;malachite_nz::natural::Natural&gt;::square (5 samples, 0.02%)</title><rect x="22.3220%" y="501" width="0.0248%" height="15" fill="rgb(230,62,27)" fg:x="4501" fg:w="5"/><text x="22.5720%" y="511.50"></text></g><g><title>alloc::alloc::exchange_malloc (5 samples, 0.02%)</title><rect x="22.3220%" y="485" width="0.0248%" height="15" fill="rgb(216,154,8)" fg:x="4501" fg:w="5"/><text x="22.5720%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.02%)</title><rect x="22.3220%" y="469" width="0.0248%" height="15" fill="rgb(244,35,45)" fg:x="4501" fg:w="5"/><text x="22.5720%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.02%)</title><rect x="22.3220%" y="453" width="0.0248%" height="15" fill="rgb(251,115,12)" fg:x="4501" fg:w="5"/><text x="22.5720%" y="463.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.02%)</title><rect x="22.3220%" y="437" width="0.0248%" height="15" fill="rgb(240,54,50)" fg:x="4501" fg:w="5"/><text x="22.5720%" y="447.50"></text></g><g><title>__udivti3 (2,776 samples, 13.77%)</title><rect x="22.3567%" y="549" width="13.7671%" height="15" fill="rgb(233,84,52)" fg:x="4508" fg:w="2776"/><text x="22.6067%" y="559.50">__udivti3</text></g><g><title>compiler_builtins::int::udiv::__udivti3 (2,723 samples, 13.50%)</title><rect x="22.6195%" y="533" width="13.5043%" height="15" fill="rgb(207,117,47)" fg:x="4561" fg:w="2723"/><text x="22.8695%" y="543.50">compiler_builtins::i..</text></g><g><title>compiler_builtins::int::specialized_div_rem::u128_div_rem (2,723 samples, 13.50%)</title><rect x="22.6195%" y="517" width="13.5043%" height="15" fill="rgb(249,43,39)" fg:x="4561" fg:w="2723"/><text x="22.8695%" y="527.50">compiler_builtins::i..</text></g><g><title>compiler_builtins::int::specialized_div_rem::u128_by_u64_div_rem (2,672 samples, 13.25%)</title><rect x="22.8724%" y="501" width="13.2513%" height="15" fill="rgb(209,38,44)" fg:x="4612" fg:w="2672"/><text x="23.1224%" y="511.50">compiler_builtins::i..</text></g><g><title>asm_sysvec_apic_timer_interrupt (3 samples, 0.01%)</title><rect x="36.1089%" y="485" width="0.0149%" height="15" fill="rgb(236,212,23)" fg:x="7281" fg:w="3"/><text x="36.3589%" y="495.50"></text></g><g><title>sysvec_apic_timer_interrupt (3 samples, 0.01%)</title><rect x="36.1089%" y="469" width="0.0149%" height="15" fill="rgb(242,79,21)" fg:x="7281" fg:w="3"/><text x="36.3589%" y="479.50"></text></g><g><title>__sysvec_apic_timer_interrupt (3 samples, 0.01%)</title><rect x="36.1089%" y="453" width="0.0149%" height="15" fill="rgb(211,96,35)" fg:x="7281" fg:w="3"/><text x="36.3589%" y="463.50"></text></g><g><title>hrtimer_interrupt (3 samples, 0.01%)</title><rect x="36.1089%" y="437" width="0.0149%" height="15" fill="rgb(253,215,40)" fg:x="7281" fg:w="3"/><text x="36.3589%" y="447.50"></text></g><g><title>__hrtimer_run_queues (3 samples, 0.01%)</title><rect x="36.1089%" y="421" width="0.0149%" height="15" fill="rgb(211,81,21)" fg:x="7281" fg:w="3"/><text x="36.3589%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (3 samples, 0.01%)</title><rect x="39.6003%" y="261" width="0.0149%" height="15" fill="rgb(208,190,38)" fg:x="7985" fg:w="3"/><text x="39.8503%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (3 samples, 0.01%)</title><rect x="39.6003%" y="245" width="0.0149%" height="15" fill="rgb(235,213,38)" fg:x="7985" fg:w="3"/><text x="39.8503%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (3 samples, 0.01%)</title><rect x="39.6003%" y="229" width="0.0149%" height="15" fill="rgb(237,122,38)" fg:x="7985" fg:w="3"/><text x="39.8503%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.13%)</title><rect x="39.9474%" y="181" width="0.1339%" height="15" fill="rgb(244,218,35)" fg:x="8055" fg:w="27"/><text x="40.1974%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (472 samples, 2.34%)</title><rect x="39.6152%" y="261" width="2.3408%" height="15" fill="rgb(240,68,47)" fg:x="7988" fg:w="472"/><text x="39.8652%" y="271.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (472 samples, 2.34%)</title><rect x="39.6152%" y="245" width="2.3408%" height="15" fill="rgb(210,16,53)" fg:x="7988" fg:w="472"/><text x="39.8652%" y="255.50">c..</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (472 samples, 2.34%)</title><rect x="39.6152%" y="229" width="2.3408%" height="15" fill="rgb(235,124,12)" fg:x="7988" fg:w="472"/><text x="39.8652%" y="239.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (472 samples, 2.34%)</title><rect x="39.6152%" y="213" width="2.3408%" height="15" fill="rgb(224,169,11)" fg:x="7988" fg:w="472"/><text x="39.8652%" y="223.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (472 samples, 2.34%)</title><rect x="39.6152%" y="197" width="2.3408%" height="15" fill="rgb(250,166,2)" fg:x="7988" fg:w="472"/><text x="39.8652%" y="207.50">c..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (378 samples, 1.87%)</title><rect x="40.0813%" y="181" width="1.8746%" height="15" fill="rgb(242,216,29)" fg:x="8082" fg:w="378"/><text x="40.3313%" y="191.50">c..</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (378 samples, 1.87%)</title><rect x="40.0813%" y="165" width="1.8746%" height="15" fill="rgb(230,116,27)" fg:x="8082" fg:w="378"/><text x="40.3313%" y="175.50">&lt;..</text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (38 samples, 0.19%)</title><rect x="41.9560%" y="261" width="0.1885%" height="15" fill="rgb(228,99,48)" fg:x="8460" fg:w="38"/><text x="42.2060%" y="271.50"></text></g><g><title>nice_rust::nice_process::process_detailed_natural::{{closure}} (38 samples, 0.19%)</title><rect x="41.9560%" y="245" width="0.1885%" height="15" fill="rgb(253,11,6)" fg:x="8460" fg:w="38"/><text x="42.2060%" y="255.50"></text></g><g><title>&lt;malachite_nz::natural::Natural as core::clone::Clone&gt;::clone (10 samples, 0.05%)</title><rect x="42.1444%" y="261" width="0.0496%" height="15" fill="rgb(247,143,39)" fg:x="8498" fg:w="10"/><text x="42.3944%" y="271.50"></text></g><g><title>&lt;malachite_nz::natural::InnerNatural as core::clone::Clone&gt;::clone (10 samples, 0.05%)</title><rect x="42.1444%" y="245" width="0.0496%" height="15" fill="rgb(236,97,10)" fg:x="8498" fg:w="10"/><text x="42.3944%" y="255.50"></text></g><g><title>core::cmp::PartialOrd::gt (1,092 samples, 5.42%)</title><rect x="42.1990%" y="261" width="5.4156%" height="15" fill="rgb(233,208,19)" fg:x="8509" fg:w="1092"/><text x="42.4490%" y="271.50">core::c..</text></g><g><title>malachite_nz::natural::comparison::partial_cmp_primitive_int::&lt;impl core::cmp::PartialOrd&lt;i32&gt; for malachite_nz::natural::Natural&gt;::partial_cmp (882 samples, 4.37%)</title><rect x="43.2404%" y="245" width="4.3741%" height="15" fill="rgb(216,164,2)" fg:x="8719" fg:w="882"/><text x="43.4904%" y="255.50">malac..</text></g><g><title>malachite_nz::natural::comparison::partial_cmp_primitive_int::&lt;impl core::cmp::PartialOrd&lt;u32&gt; for malachite_nz::natural::Natural&gt;::partial_cmp (462 samples, 2.29%)</title><rect x="45.3233%" y="229" width="2.2912%" height="15" fill="rgb(220,129,5)" fg:x="9139" fg:w="462"/><text x="45.5733%" y="239.50">m..</text></g><g><title>malachite_nz::natural::comparison::partial_cmp_primitive_int::&lt;impl core::cmp::PartialOrd&lt;u64&gt; for malachite_nz::natural::Natural&gt;::partial_cmp (462 samples, 2.29%)</title><rect x="45.3233%" y="213" width="2.2912%" height="15" fill="rgb(242,17,10)" fg:x="9139" fg:w="462"/><text x="45.5733%" y="223.50">m..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u64&gt;::partial_cmp (462 samples, 2.29%)</title><rect x="45.3233%" y="197" width="2.2912%" height="15" fill="rgb(242,107,0)" fg:x="9139" fg:w="462"/><text x="45.5733%" y="207.50">c..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u64&gt;::cmp (462 samples, 2.29%)</title><rect x="45.3233%" y="181" width="2.2912%" height="15" fill="rgb(251,28,31)" fg:x="9139" fg:w="462"/><text x="45.5733%" y="191.50">c..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u64&gt;::cmp (14 samples, 0.07%)</title><rect x="47.7088%" y="213" width="0.0694%" height="15" fill="rgb(233,223,10)" fg:x="9620" fg:w="14"/><text x="47.9588%" y="223.50"></text></g><g><title>core::cmp::PartialOrd::lt (38 samples, 0.19%)</title><rect x="47.6146%" y="261" width="0.1885%" height="15" fill="rgb(215,21,27)" fg:x="9601" fg:w="38"/><text x="47.8646%" y="271.50"></text></g><g><title>malachite_nz::natural::comparison::cmp::&lt;impl core::cmp::PartialOrd for malachite_nz::natural::Natural&gt;::partial_cmp (37 samples, 0.18%)</title><rect x="47.6195%" y="245" width="0.1835%" height="15" fill="rgb(232,23,21)" fg:x="9602" fg:w="37"/><text x="47.8695%" y="255.50"></text></g><g><title>malachite_nz::natural::comparison::cmp::&lt;impl core::cmp::Ord for malachite_nz::natural::Natural&gt;::cmp (33 samples, 0.16%)</title><rect x="47.6394%" y="229" width="0.1637%" height="15" fill="rgb(244,5,23)" fg:x="9606" fg:w="33"/><text x="47.8894%" y="239.50"></text></g><g><title>core::ptr::eq (5 samples, 0.02%)</title><rect x="47.7782%" y="213" width="0.0248%" height="15" fill="rgb(226,81,46)" fg:x="9634" fg:w="5"/><text x="48.0282%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;malachite_nz::natural::Natural&gt; (359 samples, 1.78%)</title><rect x="47.8030%" y="261" width="1.7804%" height="15" fill="rgb(247,70,30)" fg:x="9639" fg:w="359"/><text x="48.0530%" y="271.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;malachite_nz::natural::InnerNatural&gt; (359 samples, 1.78%)</title><rect x="47.8030%" y="245" width="1.7804%" height="15" fill="rgb(212,68,19)" fg:x="9639" fg:w="359"/><text x="48.0530%" y="255.50">c..</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (120 samples, 0.60%)</title><rect x="49.5834%" y="261" width="0.5951%" height="15" fill="rgb(240,187,13)" fg:x="9998" fg:w="120"/><text x="49.8334%" y="271.50"></text></g><g><title>malachite_nz::natural::arithmetic::add::&lt;impl core::ops::arith::AddAssign for malachite_nz::natural::Natural&gt;::add_assign (24 samples, 0.12%)</title><rect x="50.1785%" y="261" width="0.1190%" height="15" fill="rgb(223,113,26)" fg:x="10118" fg:w="24"/><text x="50.4285%" y="271.50"></text></g><g><title>malachite_nz::natural::arithmetic::add::&lt;impl malachite_nz::natural::Natural&gt;::add_assign_limb (14 samples, 0.07%)</title><rect x="50.2281%" y="245" width="0.0694%" height="15" fill="rgb(206,192,2)" fg:x="10128" fg:w="14"/><text x="50.4781%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (3 samples, 0.01%)</title><rect x="50.2827%" y="229" width="0.0149%" height="15" fill="rgb(241,108,4)" fg:x="10139" fg:w="3"/><text x="50.5327%" y="239.50"></text></g><g><title>__sysvec_apic_timer_interrupt (5 samples, 0.02%)</title><rect x="56.7447%" y="197" width="0.0248%" height="15" fill="rgb(247,173,49)" fg:x="11442" fg:w="5"/><text x="56.9947%" y="207.50"></text></g><g><title>hrtimer_interrupt (5 samples, 0.02%)</title><rect x="56.7447%" y="181" width="0.0248%" height="15" fill="rgb(224,114,35)" fg:x="11442" fg:w="5"/><text x="56.9947%" y="191.50"></text></g><g><title>__hrtimer_run_queues (3 samples, 0.01%)</title><rect x="56.7546%" y="165" width="0.0149%" height="15" fill="rgb(245,159,27)" fg:x="11444" fg:w="3"/><text x="57.0046%" y="175.50"></text></g><g><title>tick_sched_timer (3 samples, 0.01%)</title><rect x="56.7546%" y="149" width="0.0149%" height="15" fill="rgb(245,172,44)" fg:x="11444" fg:w="3"/><text x="57.0046%" y="159.50"></text></g><g><title>tick_sched_handle (3 samples, 0.01%)</title><rect x="56.7546%" y="133" width="0.0149%" height="15" fill="rgb(236,23,11)" fg:x="11444" fg:w="3"/><text x="57.0046%" y="143.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (6 samples, 0.03%)</title><rect x="56.7447%" y="229" width="0.0298%" height="15" fill="rgb(205,117,38)" fg:x="11442" fg:w="6"/><text x="56.9947%" y="239.50"></text></g><g><title>sysvec_apic_timer_interrupt (6 samples, 0.03%)</title><rect x="56.7447%" y="213" width="0.0298%" height="15" fill="rgb(237,72,25)" fg:x="11442" fg:w="6"/><text x="56.9947%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;mut A&gt;::eq (866 samples, 4.29%)</title><rect x="56.7744%" y="229" width="4.2948%" height="15" fill="rgb(244,70,9)" fg:x="11448" fg:w="866"/><text x="57.0244%" y="239.50">core:..</text></g><g><title>&lt;malachite_nz::natural::Natural as core::cmp::PartialEq&gt;::eq (866 samples, 4.29%)</title><rect x="56.7744%" y="213" width="4.2948%" height="15" fill="rgb(217,125,39)" fg:x="11448" fg:w="866"/><text x="57.0244%" y="223.50">&lt;mala..</text></g><g><title>&lt;malachite_nz::natural::InnerNatural as core::cmp::PartialEq&gt;::eq (866 samples, 4.29%)</title><rect x="56.7744%" y="197" width="4.2948%" height="15" fill="rgb(235,36,10)" fg:x="11448" fg:w="866"/><text x="57.0244%" y="207.50">&lt;mala..</text></g><g><title>__sysvec_apic_timer_interrupt (5 samples, 0.02%)</title><rect x="67.5015%" y="117" width="0.0248%" height="15" fill="rgb(251,123,47)" fg:x="13611" fg:w="5"/><text x="67.7515%" y="127.50"></text></g><g><title>hrtimer_interrupt (4 samples, 0.02%)</title><rect x="67.5064%" y="101" width="0.0198%" height="15" fill="rgb(221,13,13)" fg:x="13612" fg:w="4"/><text x="67.7564%" y="111.50"></text></g><g><title>__hrtimer_run_queues (4 samples, 0.02%)</title><rect x="67.5064%" y="85" width="0.0198%" height="15" fill="rgb(238,131,9)" fg:x="13612" fg:w="4"/><text x="67.7564%" y="95.50"></text></g><g><title>tick_sched_timer (4 samples, 0.02%)</title><rect x="67.5064%" y="69" width="0.0198%" height="15" fill="rgb(211,50,8)" fg:x="13612" fg:w="4"/><text x="67.7564%" y="79.50"></text></g><g><title>tick_sched_handle (4 samples, 0.02%)</title><rect x="67.5064%" y="53" width="0.0198%" height="15" fill="rgb(245,182,24)" fg:x="13612" fg:w="4"/><text x="67.7564%" y="63.50"></text></g><g><title>update_process_times (4 samples, 0.02%)</title><rect x="67.5064%" y="37" width="0.0198%" height="15" fill="rgb(242,14,37)" fg:x="13612" fg:w="4"/><text x="67.7564%" y="47.50"></text></g><g><title>malachite_base::num::arithmetic::div_mod::&lt;impl malachite_base::num::arithmetic::traits::DivAssignRem for u64&gt;::div_assign_rem (547 samples, 2.71%)</title><rect x="64.8185%" y="213" width="2.7128%" height="15" fill="rgb(246,228,12)" fg:x="13070" fg:w="547"/><text x="65.0685%" y="223.50">ma..</text></g><g><title>malachite_base::num::arithmetic::div_mod::&lt;impl malachite_base::num::arithmetic::traits::DivAssignMod for u64&gt;::div_assign_mod (547 samples, 2.71%)</title><rect x="64.8185%" y="197" width="2.7128%" height="15" fill="rgb(213,55,15)" fg:x="13070" fg:w="547"/><text x="65.0685%" y="207.50">ma..</text></g><g><title>malachite_base::num::arithmetic::div_mod::div_assign_mod_unsigned (547 samples, 2.71%)</title><rect x="64.8185%" y="181" width="2.7128%" height="15" fill="rgb(209,9,3)" fg:x="13070" fg:w="547"/><text x="65.0685%" y="191.50">ma..</text></g><g><title>&lt;u64 as core::ops::arith::DivAssign&gt;::div_assign (523 samples, 2.59%)</title><rect x="64.9375%" y="165" width="2.5937%" height="15" fill="rgb(230,59,30)" fg:x="13094" fg:w="523"/><text x="65.1875%" y="175.50">&lt;u..</text></g><g><title>asm_sysvec_apic_timer_interrupt (6 samples, 0.03%)</title><rect x="67.5015%" y="149" width="0.0298%" height="15" fill="rgb(209,121,21)" fg:x="13611" fg:w="6"/><text x="67.7515%" y="159.50"></text></g><g><title>sysvec_apic_timer_interrupt (6 samples, 0.03%)</title><rect x="67.5015%" y="133" width="0.0298%" height="15" fill="rgb(220,109,13)" fg:x="13611" fg:w="6"/><text x="67.7515%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (47 samples, 0.23%)</title><rect x="67.8437%" y="197" width="0.2331%" height="15" fill="rgb(232,18,1)" fg:x="13680" fg:w="47"/><text x="68.0937%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (400 samples, 1.98%)</title><rect x="68.0768%" y="101" width="1.9837%" height="15" fill="rgb(215,41,42)" fg:x="13727" fg:w="400"/><text x="68.3268%" y="111.50">&lt;..</text></g><g><title>malachite_base::slices::slice_trailing_zeros::{{closure}} (143 samples, 0.71%)</title><rect x="69.3513%" y="85" width="0.7092%" height="15" fill="rgb(224,123,36)" fg:x="13984" fg:w="143"/><text x="69.6013%" y="95.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (143 samples, 0.71%)</title><rect x="69.3513%" y="69" width="0.7092%" height="15" fill="rgb(240,125,3)" fg:x="13984" fg:w="143"/><text x="69.6013%" y="79.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u64&gt;::eq (143 samples, 0.71%)</title><rect x="69.3513%" y="53" width="0.7092%" height="15" fill="rgb(205,98,50)" fg:x="13984" fg:w="143"/><text x="69.6013%" y="63.50"></text></g><g><title>malachite_base::slices::slice_trailing_zeros (412 samples, 2.04%)</title><rect x="68.0768%" y="197" width="2.0432%" height="15" fill="rgb(205,185,37)" fg:x="13727" fg:w="412"/><text x="68.3268%" y="207.50">m..</text></g><g><title>core::iter::traits::iterator::Iterator::count (412 samples, 2.04%)</title><rect x="68.0768%" y="181" width="2.0432%" height="15" fill="rgb(238,207,15)" fg:x="13727" fg:w="412"/><text x="68.3268%" y="191.50">c..</text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (412 samples, 2.04%)</title><rect x="68.0768%" y="165" width="2.0432%" height="15" fill="rgb(213,199,42)" fg:x="13727" fg:w="412"/><text x="68.3268%" y="175.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (412 samples, 2.04%)</title><rect x="68.0768%" y="149" width="2.0432%" height="15" fill="rgb(235,201,11)" fg:x="13727" fg:w="412"/><text x="68.3268%" y="159.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (412 samples, 2.04%)</title><rect x="68.0768%" y="133" width="2.0432%" height="15" fill="rgb(207,46,11)" fg:x="13727" fg:w="412"/><text x="68.3268%" y="143.50">&lt;..</text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::try_rfold (412 samples, 2.04%)</title><rect x="68.0768%" y="117" width="2.0432%" height="15" fill="rgb(241,35,35)" fg:x="13727" fg:w="412"/><text x="68.3268%" y="127.50">c..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (12 samples, 0.06%)</title><rect x="70.0605%" y="101" width="0.0595%" height="15" fill="rgb(243,32,47)" fg:x="14127" fg:w="12"/><text x="70.3105%" y="111.50"></text></g><g><title>[libc-2.31.so] (199 samples, 0.99%)</title><rect x="71.2755%" y="69" width="0.9869%" height="15" fill="rgb(247,202,23)" fg:x="14372" fg:w="199"/><text x="71.5255%" y="79.50"></text></g><g><title>__rdl_dealloc (10 samples, 0.05%)</title><rect x="72.2624%" y="69" width="0.0496%" height="15" fill="rgb(219,102,11)" fg:x="14571" fg:w="10"/><text x="72.5124%" y="79.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (10 samples, 0.05%)</title><rect x="72.2624%" y="53" width="0.0496%" height="15" fill="rgb(243,110,44)" fg:x="14571" fg:w="10"/><text x="72.5124%" y="63.50"></text></g><g><title>__rust_dealloc (5 samples, 0.02%)</title><rect x="72.3120%" y="69" width="0.0248%" height="15" fill="rgb(222,74,54)" fg:x="14581" fg:w="5"/><text x="72.5620%" y="79.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (331 samples, 1.64%)</title><rect x="71.1664%" y="101" width="1.6415%" height="15" fill="rgb(216,99,12)" fg:x="14350" fg:w="331"/><text x="71.4164%" y="111.50"></text></g><g><title>alloc::alloc::dealloc (331 samples, 1.64%)</title><rect x="71.1664%" y="85" width="1.6415%" height="15" fill="rgb(226,22,26)" fg:x="14350" fg:w="331"/><text x="71.4164%" y="95.50"></text></g><g><title>cfree (95 samples, 0.47%)</title><rect x="72.3368%" y="69" width="0.4711%" height="15" fill="rgb(217,163,10)" fg:x="14586" fg:w="95"/><text x="72.5868%" y="79.50"></text></g><g><title>malachite_nz::natural::Natural::trim (1,073 samples, 5.32%)</title><rect x="67.5312%" y="213" width="5.3214%" height="15" fill="rgb(213,25,53)" fg:x="13617" fg:w="1073"/><text x="67.7812%" y="223.50">malachi..</text></g><g><title>malachite_nz::natural::Natural::demote_if_small (551 samples, 2.73%)</title><rect x="70.1200%" y="197" width="2.7326%" height="15" fill="rgb(252,105,26)" fg:x="14139" fg:w="551"/><text x="70.3700%" y="207.50">ma..</text></g><g><title>core::ptr::drop_in_place&lt;malachite_nz::natural::Natural&gt; (343 samples, 1.70%)</title><rect x="71.1516%" y="181" width="1.7011%" height="15" fill="rgb(220,39,43)" fg:x="14347" fg:w="343"/><text x="71.4016%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;malachite_nz::natural::InnerNatural&gt; (343 samples, 1.70%)</title><rect x="71.1516%" y="165" width="1.7011%" height="15" fill="rgb(229,68,48)" fg:x="14347" fg:w="343"/><text x="71.4016%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u64&gt;&gt; (343 samples, 1.70%)</title><rect x="71.1516%" y="149" width="1.7011%" height="15" fill="rgb(252,8,32)" fg:x="14347" fg:w="343"/><text x="71.4016%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u64&gt;&gt; (343 samples, 1.70%)</title><rect x="71.1516%" y="133" width="1.7011%" height="15" fill="rgb(223,20,43)" fg:x="14347" fg:w="343"/><text x="71.4016%" y="143.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (343 samples, 1.70%)</title><rect x="71.1516%" y="117" width="1.7011%" height="15" fill="rgb(229,81,49)" fg:x="14347" fg:w="343"/><text x="71.4016%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (9 samples, 0.04%)</title><rect x="72.8080%" y="101" width="0.0446%" height="15" fill="rgb(236,28,36)" fg:x="14681" fg:w="9"/><text x="73.0580%" y="111.50"></text></g><g><title>core::alloc::layout::Layout::array (4 samples, 0.02%)</title><rect x="72.8328%" y="85" width="0.0198%" height="15" fill="rgb(249,185,26)" fg:x="14686" fg:w="4"/><text x="73.0828%" y="95.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (4 samples, 0.02%)</title><rect x="72.8328%" y="69" width="0.0198%" height="15" fill="rgb(249,174,33)" fg:x="14686" fg:w="4"/><text x="73.0828%" y="79.50"></text></g><g><title>malachite_base::num::logic::leading_zeros::&lt;impl malachite_base::num::logic::traits::LeadingZeros for u64&gt;::leading_zeros (12 samples, 0.06%)</title><rect x="81.1843%" y="197" width="0.0595%" height="15" fill="rgb(233,201,37)" fg:x="16370" fg:w="12"/><text x="81.4343%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (12 samples, 0.06%)</title><rect x="81.1843%" y="181" width="0.0595%" height="15" fill="rgb(221,78,26)" fg:x="16370" fg:w="12"/><text x="81.4343%" y="191.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_add (199 samples, 0.99%)</title><rect x="84.6261%" y="181" width="0.9869%" height="15" fill="rgb(250,127,30)" fg:x="17064" fg:w="199"/><text x="84.8761%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (282 samples, 1.40%)</title><rect x="85.6130%" y="181" width="1.3985%" height="15" fill="rgb(230,49,44)" fg:x="17263" fg:w="282"/><text x="85.8630%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (118 samples, 0.59%)</title><rect x="87.0115%" y="181" width="0.5852%" height="15" fill="rgb(229,67,23)" fg:x="17545" fg:w="118"/><text x="87.2615%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (263 samples, 1.30%)</title><rect x="87.5967%" y="181" width="1.3043%" height="15" fill="rgb(249,83,47)" fg:x="17663" fg:w="263"/><text x="87.8467%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_sub (55 samples, 0.27%)</title><rect x="88.9010%" y="181" width="0.2728%" height="15" fill="rgb(215,43,3)" fg:x="17926" fg:w="55"/><text x="89.1510%" y="191.50"></text></g><g><title>malachite_base::num::arithmetic::wrapping_sub::&lt;impl malachite_base::num::arithmetic::traits::WrappingSubAssign for u64&gt;::wrapping_sub_assign (75 samples, 0.37%)</title><rect x="89.1738%" y="181" width="0.3720%" height="15" fill="rgb(238,154,13)" fg:x="17981" fg:w="75"/><text x="89.4238%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_sub (75 samples, 0.37%)</title><rect x="89.1738%" y="165" width="0.3720%" height="15" fill="rgb(219,56,2)" fg:x="17981" fg:w="75"/><text x="89.4238%" y="175.50"></text></g><g><title>malachite_nz::natural::arithmetic::div_mod::div_mod_by_preinversion (1,691 samples, 8.39%)</title><rect x="81.2438%" y="197" width="8.3862%" height="15" fill="rgb(233,0,4)" fg:x="16382" fg:w="1691"/><text x="81.4938%" y="207.50">malachite_nz..</text></g><g><title>malachite_base::num::conversion::half::&lt;impl malachite_base::num::conversion::traits::JoinHalves for u128&gt;::join_halves (17 samples, 0.08%)</title><rect x="89.5457%" y="181" width="0.0843%" height="15" fill="rgb(235,30,7)" fg:x="18056" fg:w="17"/><text x="89.7957%" y="191.50"></text></g><g><title>malachite_base::num::conversion::half::join_halves (17 samples, 0.08%)</title><rect x="89.5457%" y="165" width="0.0843%" height="15" fill="rgb(250,79,13)" fg:x="18056" fg:w="17"/><text x="89.7957%" y="175.50"></text></g><g><title>&lt;u128 as core::ops::bit::BitOr&gt;::bitor (17 samples, 0.08%)</title><rect x="89.5457%" y="149" width="0.0843%" height="15" fill="rgb(211,146,34)" fg:x="18056" fg:w="17"/><text x="89.7957%" y="159.50"></text></g><g><title>malachite_nz::natural::arithmetic::div_mod::&lt;impl malachite_base::num::arithmetic::traits::DivAssignRem&lt;&amp;malachite_nz::natural::Natural&gt; for malachite_nz::natural::Natural&gt;::div_assign_rem (8,099 samples, 40.17%)</title><rect x="50.3025%" y="261" width="40.1656%" height="15" fill="rgb(228,22,38)" fg:x="10143" fg:w="8099"/><text x="50.5525%" y="271.50">malachite_nz::natural::arithmetic::div_mod::&lt;impl malachite_base::..</text></g><g><title>malachite_nz::natural::arithmetic::div_mod::&lt;impl malachite_base::num::arithmetic::traits::DivAssignMod&lt;&amp;malachite_nz::natural::Natural&gt; for malachite_nz::natural::Natural&gt;::div_assign_mod (7,797 samples, 38.67%)</title><rect x="51.8002%" y="245" width="38.6679%" height="15" fill="rgb(235,168,5)" fg:x="10445" fg:w="7797"/><text x="52.0502%" y="255.50">malachite_nz::natural::arithmetic::div_mod::&lt;impl malachite_bas..</text></g><g><title>malachite_nz::natural::arithmetic::div_mod::&lt;impl malachite_nz::natural::Natural&gt;::div_assign_mod_limb (5,928 samples, 29.40%)</title><rect x="61.0692%" y="229" width="29.3989%" height="15" fill="rgb(221,155,16)" fg:x="12314" fg:w="5928"/><text x="61.3192%" y="239.50">malachite_nz::natural::arithmetic::div_mod::&lt;im..</text></g><g><title>malachite_nz::natural::arithmetic::div_mod::limbs_div_limb_in_place_mod (3,552 samples, 17.62%)</title><rect x="72.8526%" y="213" width="17.6156%" height="15" fill="rgb(215,215,53)" fg:x="14690" fg:w="3552"/><text x="73.1026%" y="223.50">malachite_nz::natural::arit..</text></g><g><title>malachite_nz::natural::arithmetic::div_mod::limbs_invert_limb (169 samples, 0.84%)</title><rect x="89.6300%" y="197" width="0.8381%" height="15" fill="rgb(223,4,10)" fg:x="18073" fg:w="169"/><text x="89.8800%" y="207.50"></text></g><g><title>malachite_base::num::logic::significant_bits::&lt;impl malachite_base::num::logic::traits::SignificantBits for u64&gt;::significant_bits (12 samples, 0.06%)</title><rect x="90.8054%" y="245" width="0.0595%" height="15" fill="rgb(234,103,6)" fg:x="18310" fg:w="12"/><text x="91.0554%" y="255.50"></text></g><g><title>malachite_base::num::logic::significant_bits::significant_bits_unsigned (12 samples, 0.06%)</title><rect x="90.8054%" y="229" width="0.0595%" height="15" fill="rgb(227,97,0)" fg:x="18310" fg:w="12"/><text x="91.0554%" y="239.50"></text></g><g><title>malachite_base::num::logic::leading_zeros::&lt;impl malachite_base::num::logic::traits::LeadingZeros for u64&gt;::leading_zeros (10 samples, 0.05%)</title><rect x="90.8153%" y="213" width="0.0496%" height="15" fill="rgb(234,150,53)" fg:x="18312" fg:w="10"/><text x="91.0653%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (10 samples, 0.05%)</title><rect x="90.8153%" y="197" width="0.0496%" height="15" fill="rgb(228,201,54)" fg:x="18312" fg:w="10"/><text x="91.0653%" y="207.50"></text></g><g><title>malachite_nz::natural::Natural::demote_if_small (10 samples, 0.05%)</title><rect x="90.8649%" y="245" width="0.0496%" height="15" fill="rgb(222,22,37)" fg:x="18322" fg:w="10"/><text x="91.1149%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (7 samples, 0.03%)</title><rect x="90.8798%" y="229" width="0.0347%" height="15" fill="rgb(237,53,32)" fg:x="18325" fg:w="7"/><text x="91.1298%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (14 samples, 0.07%)</title><rect x="90.9294%" y="229" width="0.0694%" height="15" fill="rgb(233,25,53)" fg:x="18335" fg:w="14"/><text x="91.1794%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (13 samples, 0.06%)</title><rect x="90.9988%" y="229" width="0.0645%" height="15" fill="rgb(210,40,34)" fg:x="18349" fg:w="13"/><text x="91.2488%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (11 samples, 0.05%)</title><rect x="92.5412%" y="213" width="0.0546%" height="15" fill="rgb(241,220,44)" fg:x="18660" fg:w="11"/><text x="92.7912%" y="223.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (11 samples, 0.05%)</title><rect x="92.5412%" y="197" width="0.0546%" height="15" fill="rgb(235,28,35)" fg:x="18660" fg:w="11"/><text x="92.7912%" y="207.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (11 samples, 0.05%)</title><rect x="92.5412%" y="181" width="0.0546%" height="15" fill="rgb(210,56,17)" fg:x="18660" fg:w="11"/><text x="92.7912%" y="191.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (5 samples, 0.02%)</title><rect x="92.5709%" y="165" width="0.0248%" height="15" fill="rgb(224,130,29)" fg:x="18666" fg:w="5"/><text x="92.8209%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (5 samples, 0.02%)</title><rect x="92.5709%" y="149" width="0.0248%" height="15" fill="rgb(235,212,8)" fg:x="18666" fg:w="5"/><text x="92.8209%" y="159.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (5 samples, 0.02%)</title><rect x="92.5709%" y="133" width="0.0248%" height="15" fill="rgb(223,33,50)" fg:x="18666" fg:w="5"/><text x="92.8209%" y="143.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (5 samples, 0.02%)</title><rect x="92.5709%" y="117" width="0.0248%" height="15" fill="rgb(219,149,13)" fg:x="18666" fg:w="5"/><text x="92.8209%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (6 samples, 0.03%)</title><rect x="92.5957%" y="213" width="0.0298%" height="15" fill="rgb(250,156,29)" fg:x="18671" fg:w="6"/><text x="92.8457%" y="223.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (6 samples, 0.03%)</title><rect x="92.5957%" y="197" width="0.0298%" height="15" fill="rgb(216,193,19)" fg:x="18671" fg:w="6"/><text x="92.8457%" y="207.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (6 samples, 0.03%)</title><rect x="92.5957%" y="181" width="0.0298%" height="15" fill="rgb(216,135,14)" fg:x="18671" fg:w="6"/><text x="92.8457%" y="191.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (6 samples, 0.03%)</title><rect x="92.5957%" y="165" width="0.0298%" height="15" fill="rgb(241,47,5)" fg:x="18671" fg:w="6"/><text x="92.8457%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (6 samples, 0.03%)</title><rect x="92.5957%" y="149" width="0.0298%" height="15" fill="rgb(233,42,35)" fg:x="18671" fg:w="6"/><text x="92.8457%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (6 samples, 0.03%)</title><rect x="92.5957%" y="133" width="0.0298%" height="15" fill="rgb(231,13,6)" fg:x="18671" fg:w="6"/><text x="92.8457%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (6 samples, 0.03%)</title><rect x="92.5957%" y="117" width="0.0298%" height="15" fill="rgb(207,181,40)" fg:x="18671" fg:w="6"/><text x="92.8457%" y="127.50"></text></g><g><title>&lt;malachite_base::num::logic::bit_iterable::PrimitiveUnsignedBitIterator&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (15 samples, 0.07%)</title><rect x="92.6403%" y="149" width="0.0744%" height="15" fill="rgb(254,173,49)" fg:x="18680" fg:w="15"/><text x="92.8903%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::nth (17 samples, 0.08%)</title><rect x="92.6403%" y="197" width="0.0843%" height="15" fill="rgb(221,1,38)" fg:x="18680" fg:w="17"/><text x="92.8903%" y="207.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::nth_back (17 samples, 0.08%)</title><rect x="92.6403%" y="181" width="0.0843%" height="15" fill="rgb(206,124,46)" fg:x="18680" fg:w="17"/><text x="92.8903%" y="191.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::advance_back_by (17 samples, 0.08%)</title><rect x="92.6403%" y="165" width="0.0843%" height="15" fill="rgb(249,21,11)" fg:x="18680" fg:w="17"/><text x="92.8903%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u64&gt;::eq (3 samples, 0.01%)</title><rect x="92.7792%" y="181" width="0.0149%" height="15" fill="rgb(222,201,40)" fg:x="18708" fg:w="3"/><text x="93.0292%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.17%)</title><rect x="92.6255%" y="213" width="0.1736%" height="15" fill="rgb(235,61,29)" fg:x="18677" fg:w="35"/><text x="92.8755%" y="223.50"></text></g><g><title>&lt;malachite_base::num::logic::bit_iterable::PrimitiveUnsignedBitIterator&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (15 samples, 0.07%)</title><rect x="92.7247%" y="197" width="0.0744%" height="15" fill="rgb(219,207,3)" fg:x="18697" fg:w="15"/><text x="92.9747%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (3 samples, 0.01%)</title><rect x="92.9082%" y="181" width="0.0149%" height="15" fill="rgb(222,56,46)" fg:x="18734" fg:w="3"/><text x="93.1582%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.01%)</title><rect x="92.9082%" y="165" width="0.0149%" height="15" fill="rgb(239,76,54)" fg:x="18734" fg:w="3"/><text x="93.1582%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3 samples, 0.01%)</title><rect x="92.9230%" y="181" width="0.0149%" height="15" fill="rgb(231,124,27)" fg:x="18737" fg:w="3"/><text x="93.1730%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (6 samples, 0.03%)</title><rect x="93.0371%" y="117" width="0.0298%" height="15" fill="rgb(249,195,6)" fg:x="18760" fg:w="6"/><text x="93.2871%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (4 samples, 0.02%)</title><rect x="93.0669%" y="117" width="0.0198%" height="15" fill="rgb(237,174,47)" fg:x="18766" fg:w="4"/><text x="93.3169%" y="127.50"></text></g><g><title>__libc_malloc (68 samples, 0.34%)</title><rect x="93.2008%" y="101" width="0.3372%" height="15" fill="rgb(206,201,31)" fg:x="18793" fg:w="68"/><text x="93.4508%" y="111.50"></text></g><g><title>__rdl_alloc (20 samples, 0.10%)</title><rect x="93.5380%" y="101" width="0.0992%" height="15" fill="rgb(231,57,52)" fg:x="18861" fg:w="20"/><text x="93.7880%" y="111.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (20 samples, 0.10%)</title><rect x="93.5380%" y="85" width="0.0992%" height="15" fill="rgb(248,177,22)" fg:x="18861" fg:w="20"/><text x="93.7880%" y="95.50"></text></g><g><title>__rust_alloc (3 samples, 0.01%)</title><rect x="93.6372%" y="101" width="0.0149%" height="15" fill="rgb(215,211,37)" fg:x="18881" fg:w="3"/><text x="93.8872%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (139 samples, 0.69%)</title><rect x="93.0867%" y="117" width="0.6893%" height="15" fill="rgb(241,128,51)" fg:x="18770" fg:w="139"/><text x="93.3367%" y="127.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (25 samples, 0.12%)</title><rect x="93.6521%" y="101" width="0.1240%" height="15" fill="rgb(227,165,31)" fg:x="18884" fg:w="25"/><text x="93.9021%" y="111.50"></text></g><g><title>core::alloc::layout::Layout::array (5 samples, 0.02%)</title><rect x="93.7760%" y="117" width="0.0248%" height="15" fill="rgb(228,167,24)" fg:x="18909" fg:w="5"/><text x="94.0260%" y="127.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (5 samples, 0.02%)</title><rect x="93.7760%" y="101" width="0.0248%" height="15" fill="rgb(228,143,12)" fg:x="18909" fg:w="5"/><text x="94.0260%" y="111.50"></text></g><g><title>core::cmp::max (25 samples, 0.12%)</title><rect x="93.8008%" y="117" width="0.1240%" height="15" fill="rgb(249,149,8)" fg:x="18914" fg:w="25"/><text x="94.0508%" y="127.50"></text></g><g><title>core::cmp::Ord::max (25 samples, 0.12%)</title><rect x="93.8008%" y="101" width="0.1240%" height="15" fill="rgb(243,35,44)" fg:x="18914" fg:w="25"/><text x="94.0508%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (200 samples, 0.99%)</title><rect x="92.9379%" y="181" width="0.9919%" height="15" fill="rgb(246,89,9)" fg:x="18740" fg:w="200"/><text x="93.1879%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (200 samples, 0.99%)</title><rect x="92.9379%" y="165" width="0.9919%" height="15" fill="rgb(233,213,13)" fg:x="18740" fg:w="200"/><text x="93.1879%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (196 samples, 0.97%)</title><rect x="92.9577%" y="149" width="0.9720%" height="15" fill="rgb(233,141,41)" fg:x="18744" fg:w="196"/><text x="93.2077%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (196 samples, 0.97%)</title><rect x="92.9577%" y="133" width="0.9720%" height="15" fill="rgb(239,167,4)" fg:x="18744" fg:w="196"/><text x="93.2077%" y="143.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (22 samples, 0.11%)</title><rect x="93.9298%" y="181" width="0.1091%" height="15" fill="rgb(209,217,16)" fg:x="18940" fg:w="22"/><text x="94.1798%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (22 samples, 0.11%)</title><rect x="93.9298%" y="165" width="0.1091%" height="15" fill="rgb(219,88,35)" fg:x="18940" fg:w="22"/><text x="94.1798%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (4 samples, 0.02%)</title><rect x="94.0190%" y="149" width="0.0198%" height="15" fill="rgb(220,193,23)" fg:x="18958" fg:w="4"/><text x="94.2690%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (300 samples, 1.49%)</title><rect x="92.7990%" y="213" width="1.4878%" height="15" fill="rgb(230,90,52)" fg:x="18712" fg:w="300"/><text x="93.0490%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (278 samples, 1.38%)</title><rect x="92.9082%" y="197" width="1.3787%" height="15" fill="rgb(252,106,19)" fg:x="18734" fg:w="278"/><text x="93.1582%" y="207.50"></text></g><g><title>core::ptr::write (48 samples, 0.24%)</title><rect x="94.0488%" y="181" width="0.2380%" height="15" fill="rgb(206,74,20)" fg:x="18964" fg:w="48"/><text x="94.2988%" y="191.50"></text></g><g><title>[libc-2.31.so] (33 samples, 0.16%)</title><rect x="94.1232%" y="165" width="0.1637%" height="15" fill="rgb(230,138,44)" fg:x="18979" fg:w="33"/><text x="94.3732%" y="175.50"></text></g><g><title>__libc_calloc (219 samples, 1.09%)</title><rect x="94.3761%" y="101" width="1.0861%" height="15" fill="rgb(235,182,43)" fg:x="19030" fg:w="219"/><text x="94.6261%" y="111.50"></text></g><g><title>[libc-2.31.so] (105 samples, 0.52%)</title><rect x="94.9415%" y="85" width="0.5207%" height="15" fill="rgb(242,16,51)" fg:x="19144" fg:w="105"/><text x="95.1915%" y="95.50"></text></g><g><title>__rdl_alloc_zeroed (17 samples, 0.08%)</title><rect x="95.4622%" y="101" width="0.0843%" height="15" fill="rgb(248,9,4)" fg:x="19249" fg:w="17"/><text x="95.7122%" y="111.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (14 samples, 0.07%)</title><rect x="95.4771%" y="85" width="0.0694%" height="15" fill="rgb(210,31,22)" fg:x="19252" fg:w="14"/><text x="95.7271%" y="95.50"></text></g><g><title>alloc::vec::from_elem (257 samples, 1.27%)</title><rect x="94.2868%" y="213" width="1.2745%" height="15" fill="rgb(239,54,39)" fg:x="19012" fg:w="257"/><text x="94.5368%" y="223.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (257 samples, 1.27%)</title><rect x="94.2868%" y="197" width="1.2745%" height="15" fill="rgb(230,99,41)" fg:x="19012" fg:w="257"/><text x="94.5368%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (248 samples, 1.23%)</title><rect x="94.3315%" y="181" width="1.2299%" height="15" fill="rgb(253,106,12)" fg:x="19021" fg:w="248"/><text x="94.5815%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (248 samples, 1.23%)</title><rect x="94.3315%" y="165" width="1.2299%" height="15" fill="rgb(213,46,41)" fg:x="19021" fg:w="248"/><text x="94.5815%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (242 samples, 1.20%)</title><rect x="94.3612%" y="149" width="1.2002%" height="15" fill="rgb(215,133,35)" fg:x="19027" fg:w="242"/><text x="94.6112%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (242 samples, 1.20%)</title><rect x="94.3612%" y="133" width="1.2002%" height="15" fill="rgb(213,28,5)" fg:x="19027" fg:w="242"/><text x="94.6112%" y="143.50"></text></g><g><title>alloc::alloc::alloc_zeroed (242 samples, 1.20%)</title><rect x="94.3612%" y="117" width="1.2002%" height="15" fill="rgb(215,77,49)" fg:x="19027" fg:w="242"/><text x="94.6112%" y="127.50"></text></g><g><title>__rust_alloc_zeroed (3 samples, 0.01%)</title><rect x="95.5465%" y="101" width="0.0149%" height="15" fill="rgb(248,100,22)" fg:x="19266" fg:w="3"/><text x="95.7965%" y="111.50"></text></g><g><title>[libc-2.31.so] (112 samples, 0.56%)</title><rect x="95.6159%" y="133" width="0.5554%" height="15" fill="rgb(208,67,9)" fg:x="19280" fg:w="112"/><text x="95.8659%" y="143.50"></text></g><g><title>__rdl_dealloc (4 samples, 0.02%)</title><rect x="96.1714%" y="133" width="0.0198%" height="15" fill="rgb(219,133,21)" fg:x="19392" fg:w="4"/><text x="96.4214%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (4 samples, 0.02%)</title><rect x="96.1714%" y="117" width="0.0198%" height="15" fill="rgb(246,46,29)" fg:x="19392" fg:w="4"/><text x="96.4214%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (169 samples, 0.84%)</title><rect x="95.6011%" y="165" width="0.8381%" height="15" fill="rgb(246,185,52)" fg:x="19277" fg:w="169"/><text x="95.8511%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (169 samples, 0.84%)</title><rect x="95.6011%" y="149" width="0.8381%" height="15" fill="rgb(252,136,11)" fg:x="19277" fg:w="169"/><text x="95.8511%" y="159.50"></text></g><g><title>cfree (48 samples, 0.24%)</title><rect x="96.2012%" y="133" width="0.2380%" height="15" fill="rgb(219,138,53)" fg:x="19398" fg:w="48"/><text x="96.4512%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u64&gt;&gt; (184 samples, 0.91%)</title><rect x="95.5614%" y="213" width="0.9125%" height="15" fill="rgb(211,51,23)" fg:x="19269" fg:w="184"/><text x="95.8114%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u64&gt;&gt; (184 samples, 0.91%)</title><rect x="95.5614%" y="197" width="0.9125%" height="15" fill="rgb(247,221,28)" fg:x="19269" fg:w="184"/><text x="95.8114%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (184 samples, 0.91%)</title><rect x="95.5614%" y="181" width="0.9125%" height="15" fill="rgb(251,222,45)" fg:x="19269" fg:w="184"/><text x="95.8114%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (7 samples, 0.03%)</title><rect x="96.4392%" y="165" width="0.0347%" height="15" fill="rgb(217,162,53)" fg:x="19446" fg:w="7"/><text x="96.6892%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::array (4 samples, 0.02%)</title><rect x="96.4541%" y="149" width="0.0198%" height="15" fill="rgb(229,93,14)" fg:x="19449" fg:w="4"/><text x="96.7041%" y="159.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (4 samples, 0.02%)</title><rect x="96.4541%" y="133" width="0.0198%" height="15" fill="rgb(209,67,49)" fg:x="19449" fg:w="4"/><text x="96.7041%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::saturating_sub (11 samples, 0.05%)</title><rect x="96.4987%" y="181" width="0.0546%" height="15" fill="rgb(213,87,29)" fg:x="19458" fg:w="11"/><text x="96.7487%" y="191.50"></text></g><g><title>malachite_base::num::arithmetic::power_of_2::&lt;impl malachite_base::num::arithmetic::traits::PowerOf2&lt;u64&gt; for u64&gt;::power_of_2 (20 samples, 0.10%)</title><rect x="96.5533%" y="181" width="0.0992%" height="15" fill="rgb(205,151,52)" fg:x="19469" fg:w="20"/><text x="96.8033%" y="191.50"></text></g><g><title>malachite_base::num::arithmetic::power_of_2::power_of_2_unsigned (20 samples, 0.10%)</title><rect x="96.5533%" y="165" width="0.0992%" height="15" fill="rgb(253,215,39)" fg:x="19469" fg:w="20"/><text x="96.8033%" y="175.50"></text></g><g><title>&lt;u64 as core::ops::bit::Shl&gt;::shl (20 samples, 0.10%)</title><rect x="96.5533%" y="149" width="0.0992%" height="15" fill="rgb(221,220,41)" fg:x="19469" fg:w="20"/><text x="96.8033%" y="159.50"></text></g><g><title>malachite_base::num::logic::bit_iterable::&lt;impl malachite_base::num::logic::traits::BitIterable for u64&gt;::bits (41 samples, 0.20%)</title><rect x="96.4888%" y="213" width="0.2033%" height="15" fill="rgb(218,133,21)" fg:x="19456" fg:w="41"/><text x="96.7388%" y="223.50"></text></g><g><title>malachite_base::num::logic::bit_iterable::bits_unsigned (41 samples, 0.20%)</title><rect x="96.4888%" y="197" width="0.2033%" height="15" fill="rgb(221,193,43)" fg:x="19456" fg:w="41"/><text x="96.7388%" y="207.50"></text></g><g><title>malachite_base::num::logic::significant_bits::&lt;impl malachite_base::num::logic::traits::SignificantBits for u64&gt;::significant_bits (8 samples, 0.04%)</title><rect x="96.6524%" y="181" width="0.0397%" height="15" fill="rgb(240,128,52)" fg:x="19489" fg:w="8"/><text x="96.9024%" y="191.50"></text></g><g><title>malachite_base::num::logic::significant_bits::significant_bits_unsigned (8 samples, 0.04%)</title><rect x="96.6524%" y="165" width="0.0397%" height="15" fill="rgb(253,114,12)" fg:x="19489" fg:w="8"/><text x="96.9024%" y="175.50"></text></g><g><title>malachite_base::num::logic::leading_zeros::&lt;impl malachite_base::num::logic::traits::LeadingZeros for u64&gt;::leading_zeros (10 samples, 0.05%)</title><rect x="96.6921%" y="213" width="0.0496%" height="15" fill="rgb(215,223,47)" fg:x="19497" fg:w="10"/><text x="96.9421%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (10 samples, 0.05%)</title><rect x="96.6921%" y="197" width="0.0496%" height="15" fill="rgb(248,225,23)" fg:x="19497" fg:w="10"/><text x="96.9421%" y="207.50"></text></g><g><title>malachite_base::num::logic::trailing_zeros::&lt;impl malachite_base::num::logic::traits::TrailingZeros for u64&gt;::trailing_zeros (16 samples, 0.08%)</title><rect x="96.7417%" y="213" width="0.0793%" height="15" fill="rgb(250,108,0)" fg:x="19507" fg:w="16"/><text x="96.9917%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (16 samples, 0.08%)</title><rect x="96.7417%" y="197" width="0.0793%" height="15" fill="rgb(228,208,7)" fg:x="19507" fg:w="16"/><text x="96.9917%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (13 samples, 0.06%)</title><rect x="96.8260%" y="133" width="0.0645%" height="15" fill="rgb(244,45,10)" fg:x="19524" fg:w="13"/><text x="97.0760%" y="143.50"></text></g><g><title>malachite_base::slices::slice_leading_zeros::{{closure}} (10 samples, 0.05%)</title><rect x="96.8409%" y="117" width="0.0496%" height="15" fill="rgb(207,125,25)" fg:x="19527" fg:w="10"/><text x="97.0909%" y="127.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (10 samples, 0.05%)</title><rect x="96.8409%" y="101" width="0.0496%" height="15" fill="rgb(210,195,18)" fg:x="19527" fg:w="10"/><text x="97.0909%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u64&gt;::eq (10 samples, 0.05%)</title><rect x="96.8409%" y="85" width="0.0496%" height="15" fill="rgb(249,80,12)" fg:x="19527" fg:w="10"/><text x="97.0909%" y="95.50"></text></g><g><title>malachite_base::slices::slice_leading_zeros (16 samples, 0.08%)</title><rect x="96.8211%" y="213" width="0.0793%" height="15" fill="rgb(221,65,9)" fg:x="19523" fg:w="16"/><text x="97.0711%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (16 samples, 0.08%)</title><rect x="96.8211%" y="197" width="0.0793%" height="15" fill="rgb(235,49,36)" fg:x="19523" fg:w="16"/><text x="97.0711%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16 samples, 0.08%)</title><rect x="96.8211%" y="181" width="0.0793%" height="15" fill="rgb(225,32,20)" fg:x="19523" fg:w="16"/><text x="97.0711%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (16 samples, 0.08%)</title><rect x="96.8211%" y="165" width="0.0793%" height="15" fill="rgb(215,141,46)" fg:x="19523" fg:w="16"/><text x="97.0711%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (16 samples, 0.08%)</title><rect x="96.8211%" y="149" width="0.0793%" height="15" fill="rgb(250,160,47)" fg:x="19523" fg:w="16"/><text x="97.0711%" y="159.50"></text></g><g><title>malachite_nz::natural::arithmetic::mul::limb::limbs_slice_mul_limb_in_place (59 samples, 0.29%)</title><rect x="96.9004%" y="213" width="0.2926%" height="15" fill="rgb(216,222,40)" fg:x="19539" fg:w="59"/><text x="97.1504%" y="223.50"></text></g><g><title>malachite_nz::natural::arithmetic::mul::limb::limbs_slice_mul_limb_with_carry_in_place (59 samples, 0.29%)</title><rect x="96.9004%" y="197" width="0.2926%" height="15" fill="rgb(234,217,39)" fg:x="19539" fg:w="59"/><text x="97.1504%" y="207.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.16%)</title><rect x="97.0294%" y="181" width="0.1637%" height="15" fill="rgb(207,178,40)" fg:x="19565" fg:w="33"/><text x="97.2794%" y="191.50"></text></g><g><title>malachite_nz::natural::arithmetic::pow::len_1_helper (11 samples, 0.05%)</title><rect x="97.1930%" y="213" width="0.0546%" height="15" fill="rgb(221,136,13)" fg:x="19598" fg:w="11"/><text x="97.4430%" y="223.50"></text></g><g><title>malachite_nz::natural::arithmetic::shl::limbs_slice_shl_in_place (39 samples, 0.19%)</title><rect x="97.2476%" y="213" width="0.1934%" height="15" fill="rgb(249,199,10)" fg:x="19609" fg:w="39"/><text x="97.4976%" y="223.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.02%)</title><rect x="97.4162%" y="197" width="0.0248%" height="15" fill="rgb(249,222,13)" fg:x="19643" fg:w="5"/><text x="97.6662%" y="207.50"></text></g><g><title>malachite_nz::natural::arithmetic::square::limbs_square_to_out (5 samples, 0.02%)</title><rect x="97.4410%" y="213" width="0.0248%" height="15" fill="rgb(244,185,38)" fg:x="19648" fg:w="5"/><text x="97.6910%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (5 samples, 0.02%)</title><rect x="97.5352%" y="197" width="0.0248%" height="15" fill="rgb(236,202,9)" fg:x="19667" fg:w="5"/><text x="97.7852%" y="207.50"></text></g><g><title>malachite_nz::natural::arithmetic::square::limbs_square_to_out_basecase (25 samples, 0.12%)</title><rect x="97.4658%" y="213" width="0.1240%" height="15" fill="rgb(250,229,37)" fg:x="19653" fg:w="25"/><text x="97.7158%" y="223.50"></text></g><g><title>malachite_base::num::arithmetic::square::&lt;impl malachite_base::num::arithmetic::traits::Square for u128&gt;::square (6 samples, 0.03%)</title><rect x="97.5600%" y="197" width="0.0298%" height="15" fill="rgb(206,174,23)" fg:x="19672" fg:w="6"/><text x="97.8100%" y="207.50"></text></g><g><title>malachite_nz::natural::arithmetic::pow::limbs_pow (1,358 samples, 6.73%)</title><rect x="90.9145%" y="245" width="6.7348%" height="15" fill="rgb(211,33,43)" fg:x="18332" fg:w="1358"/><text x="91.1645%" y="255.50">malachite..</text></g><g><title>malachite_nz::natural::arithmetic::pow::limbs_pow_to_out (1,328 samples, 6.59%)</title><rect x="91.0633%" y="229" width="6.5860%" height="15" fill="rgb(245,58,50)" fg:x="18362" fg:w="1328"/><text x="91.3133%" y="239.50">malachite..</text></g><g><title>malachite_nz::natural::arithmetic::square::limbs_square_to_out_scratch_len (12 samples, 0.06%)</title><rect x="97.5898%" y="213" width="0.0595%" height="15" fill="rgb(244,68,36)" fg:x="19678" fg:w="12"/><text x="97.8398%" y="223.50"></text></g><g><title>__libc_malloc (85 samples, 0.42%)</title><rect x="97.8278%" y="165" width="0.4215%" height="15" fill="rgb(232,229,15)" fg:x="19726" fg:w="85"/><text x="98.0778%" y="175.50"></text></g><g><title>__rdl_alloc (10 samples, 0.05%)</title><rect x="98.2494%" y="165" width="0.0496%" height="15" fill="rgb(254,30,23)" fg:x="19811" fg:w="10"/><text x="98.4994%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (10 samples, 0.05%)</title><rect x="98.2494%" y="149" width="0.0496%" height="15" fill="rgb(235,160,14)" fg:x="19811" fg:w="10"/><text x="98.4994%" y="159.50"></text></g><g><title>__rust_alloc (4 samples, 0.02%)</title><rect x="98.2989%" y="165" width="0.0198%" height="15" fill="rgb(212,155,44)" fg:x="19821" fg:w="4"/><text x="98.5489%" y="175.50"></text></g><g><title>alloc::alloc::exchange_malloc (103 samples, 0.51%)</title><rect x="97.8129%" y="229" width="0.5108%" height="15" fill="rgb(226,2,50)" fg:x="19723" fg:w="103"/><text x="98.0629%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (103 samples, 0.51%)</title><rect x="97.8129%" y="213" width="0.5108%" height="15" fill="rgb(234,177,6)" fg:x="19723" fg:w="103"/><text x="98.0629%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (103 samples, 0.51%)</title><rect x="97.8129%" y="197" width="0.5108%" height="15" fill="rgb(217,24,9)" fg:x="19723" fg:w="103"/><text x="98.0629%" y="207.50"></text></g><g><title>alloc::alloc::alloc (103 samples, 0.51%)</title><rect x="97.8129%" y="181" width="0.5108%" height="15" fill="rgb(220,13,46)" fg:x="19723" fg:w="103"/><text x="98.0629%" y="191.50"></text></g><g><title>malachite_nz::natural::arithmetic::pow::&lt;impl malachite_base::num::arithmetic::traits::Pow&lt;u64&gt; for &amp;malachite_nz::natural::Natural&gt;::pow (1,592 samples, 7.90%)</title><rect x="90.4682%" y="261" width="7.8953%" height="15" fill="rgb(239,221,27)" fg:x="18242" fg:w="1592"/><text x="90.7182%" y="271.50">malachite_n..</text></g><g><title>malachite_nz::natural::arithmetic::square::&lt;impl malachite_base::num::arithmetic::traits::Square for &amp;malachite_nz::natural::Natural&gt;::square (144 samples, 0.71%)</title><rect x="97.6493%" y="245" width="0.7141%" height="15" fill="rgb(222,198,25)" fg:x="19690" fg:w="144"/><text x="97.8993%" y="255.50"></text></g><g><title>malachite_base::num::arithmetic::x_mul_y_to_zz::&lt;impl malachite_base::num::arithmetic::traits::XMulYToZZ for u64&gt;::x_mul_y_to_zz (8 samples, 0.04%)</title><rect x="98.3237%" y="229" width="0.0397%" height="15" fill="rgb(211,99,13)" fg:x="19826" fg:w="8"/><text x="98.5737%" y="239.50"></text></g><g><title>malachite_base::num::arithmetic::x_mul_y_to_zz::implicit_x_mul_y_to_zz (8 samples, 0.04%)</title><rect x="98.3237%" y="213" width="0.0397%" height="15" fill="rgb(232,111,31)" fg:x="19826" fg:w="8"/><text x="98.5737%" y="223.50"></text></g><g><title>&lt;u128 as core::ops::arith::Mul&gt;::mul (8 samples, 0.04%)</title><rect x="98.3237%" y="197" width="0.0397%" height="15" fill="rgb(245,82,37)" fg:x="19826" fg:w="8"/><text x="98.5737%" y="207.50"></text></g><g><title>_start (12,871 samples, 63.83%)</title><rect x="36.1238%" y="549" width="63.8316%" height="15" fill="rgb(227,149,46)" fg:x="7284" fg:w="12871"/><text x="36.3738%" y="559.50">_start</text></g><g><title>__libc_start_main (12,871 samples, 63.83%)</title><rect x="36.1238%" y="533" width="63.8316%" height="15" fill="rgb(218,36,50)" fg:x="7284" fg:w="12871"/><text x="36.3738%" y="543.50">__libc_start_main</text></g><g><title>main (12,871 samples, 63.83%)</title><rect x="36.1238%" y="517" width="63.8316%" height="15" fill="rgb(226,80,48)" fg:x="7284" fg:w="12871"/><text x="36.3738%" y="527.50">main</text></g><g><title>std::rt::lang_start_internal (12,871 samples, 63.83%)</title><rect x="36.1238%" y="501" width="63.8316%" height="15" fill="rgb(238,224,15)" fg:x="7284" fg:w="12871"/><text x="36.3738%" y="511.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (12,871 samples, 63.83%)</title><rect x="36.1238%" y="485" width="63.8316%" height="15" fill="rgb(241,136,10)" fg:x="7284" fg:w="12871"/><text x="36.3738%" y="495.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (12,871 samples, 63.83%)</title><rect x="36.1238%" y="469" width="63.8316%" height="15" fill="rgb(208,32,45)" fg:x="7284" fg:w="12871"/><text x="36.3738%" y="479.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (12,871 samples, 63.83%)</title><rect x="36.1238%" y="453" width="63.8316%" height="15" fill="rgb(207,135,9)" fg:x="7284" fg:w="12871"/><text x="36.3738%" y="463.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (12,871 samples, 63.83%)</title><rect x="36.1238%" y="437" width="63.8316%" height="15" fill="rgb(206,86,44)" fg:x="7284" fg:w="12871"/><text x="36.3738%" y="447.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (12,871 samples, 63.83%)</title><rect x="36.1238%" y="421" width="63.8316%" height="15" fill="rgb(245,177,15)" fg:x="7284" fg:w="12871"/><text x="36.3738%" y="431.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (12,871 samples, 63.83%)</title><rect x="36.1238%" y="405" width="63.8316%" height="15" fill="rgb(206,64,50)" fg:x="7284" fg:w="12871"/><text x="36.3738%" y="415.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (12,871 samples, 63.83%)</title><rect x="36.1238%" y="389" width="63.8316%" height="15" fill="rgb(234,36,40)" fg:x="7284" fg:w="12871"/><text x="36.3738%" y="399.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (12,871 samples, 63.83%)</title><rect x="36.1238%" y="373" width="63.8316%" height="15" fill="rgb(213,64,8)" fg:x="7284" fg:w="12871"/><text x="36.3738%" y="383.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (12,871 samples, 63.83%)</title><rect x="36.1238%" y="357" width="63.8316%" height="15" fill="rgb(210,75,36)" fg:x="7284" fg:w="12871"/><text x="36.3738%" y="367.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (12,871 samples, 63.83%)</title><rect x="36.1238%" y="341" width="63.8316%" height="15" fill="rgb(229,88,21)" fg:x="7284" fg:w="12871"/><text x="36.3738%" y="351.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (12,871 samples, 63.83%)</title><rect x="36.1238%" y="325" width="63.8316%" height="15" fill="rgb(252,204,47)" fg:x="7284" fg:w="12871"/><text x="36.3738%" y="335.50">core::ops::function::FnOnce::call_once</text></g><g><title>nice_rust::main (12,871 samples, 63.83%)</title><rect x="36.1238%" y="309" width="63.8316%" height="15" fill="rgb(208,77,27)" fg:x="7284" fg:w="12871"/><text x="36.3738%" y="319.50">nice_rust::main</text></g><g><title>nice_rust::run (12,871 samples, 63.83%)</title><rect x="36.1238%" y="293" width="63.8316%" height="15" fill="rgb(221,76,26)" fg:x="7284" fg:w="12871"/><text x="36.3738%" y="303.50">nice_rust::run</text></g><g><title>nice_rust::nice_process::process_detailed_natural (12,871 samples, 63.83%)</title><rect x="36.1238%" y="277" width="63.8316%" height="15" fill="rgb(225,139,18)" fg:x="7284" fg:w="12871"/><text x="36.3738%" y="287.50">nice_rust::nice_process::process_detailed_natural</text></g><g><title>malachite_nz::natural::conversion::primitive_int_from_natural::&lt;impl core::convert::TryFrom&lt;&amp;malachite_nz::natural::Natural&gt; for usize&gt;::try_from (321 samples, 1.59%)</title><rect x="98.3634%" y="261" width="1.5919%" height="15" fill="rgb(230,137,11)" fg:x="19834" fg:w="321"/><text x="98.6134%" y="271.50"></text></g><g><title>malachite_nz::natural::conversion::primitive_int_from_natural::&lt;impl core::convert::TryFrom&lt;&amp;malachite_nz::natural::Natural&gt; for u64&gt;::try_from (321 samples, 1.59%)</title><rect x="98.3634%" y="245" width="1.5919%" height="15" fill="rgb(212,28,1)" fg:x="19834" fg:w="321"/><text x="98.6134%" y="255.50"></text></g><g><title>asm_sysvec_irq_work (5 samples, 0.02%)</title><rect x="99.9306%" y="229" width="0.0248%" height="15" fill="rgb(248,164,17)" fg:x="20150" fg:w="5"/><text x="100.1806%" y="239.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.02%)</title><rect x="99.9306%" y="213" width="0.0248%" height="15" fill="rgb(222,171,42)" fg:x="20150" fg:w="5"/><text x="100.1806%" y="223.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.02%)</title><rect x="99.9306%" y="197" width="0.0248%" height="15" fill="rgb(243,84,45)" fg:x="20150" fg:w="5"/><text x="100.1806%" y="207.50"></text></g><g><title>schedule (5 samples, 0.02%)</title><rect x="99.9306%" y="181" width="0.0248%" height="15" fill="rgb(252,49,23)" fg:x="20150" fg:w="5"/><text x="100.1806%" y="191.50"></text></g><g><title>__schedule (5 samples, 0.02%)</title><rect x="99.9306%" y="165" width="0.0248%" height="15" fill="rgb(215,19,7)" fg:x="20150" fg:w="5"/><text x="100.1806%" y="175.50"></text></g><g><title>finish_task_switch (5 samples, 0.02%)</title><rect x="99.9306%" y="149" width="0.0248%" height="15" fill="rgb(238,81,41)" fg:x="20150" fg:w="5"/><text x="100.1806%" y="159.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.02%)</title><rect x="99.9306%" y="133" width="0.0248%" height="15" fill="rgb(210,199,37)" fg:x="20150" fg:w="5"/><text x="100.1806%" y="143.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 0.02%)</title><rect x="99.9306%" y="117" width="0.0248%" height="15" fill="rgb(244,192,49)" fg:x="20150" fg:w="5"/><text x="100.1806%" y="127.50"></text></g><g><title>native_write_msr (5 samples, 0.02%)</title><rect x="99.9306%" y="101" width="0.0248%" height="15" fill="rgb(226,211,11)" fg:x="20150" fg:w="5"/><text x="100.1806%" y="111.50"></text></g><g><title>nice-rust (20,158 samples, 99.97%)</title><rect x="0.0000%" y="565" width="99.9702%" height="15" fill="rgb(236,162,54)" fg:x="0" fg:w="20158"/><text x="0.2500%" y="575.50">nice-rust</text></g><g><title>all (20,164 samples, 100%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(220,229,9)" fg:x="0" fg:w="20164"/><text x="0.2500%" y="591.50"></text></g><g><title>perf_5.10 (6 samples, 0.03%)</title><rect x="99.9702%" y="565" width="0.0298%" height="15" fill="rgb(250,87,22)" fg:x="20158" fg:w="6"/><text x="100.2202%" y="575.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 0.03%)</title><rect x="99.9702%" y="549" width="0.0298%" height="15" fill="rgb(239,43,17)" fg:x="20158" fg:w="6"/><text x="100.2202%" y="559.50"></text></g><g><title>do_syscall_64 (6 samples, 0.03%)</title><rect x="99.9702%" y="533" width="0.0298%" height="15" fill="rgb(231,177,25)" fg:x="20158" fg:w="6"/><text x="100.2202%" y="543.50"></text></g><g><title>__x64_sys_execve (6 samples, 0.03%)</title><rect x="99.9702%" y="517" width="0.0298%" height="15" fill="rgb(219,179,1)" fg:x="20158" fg:w="6"/><text x="100.2202%" y="527.50"></text></g><g><title>do_execveat_common (6 samples, 0.03%)</title><rect x="99.9702%" y="501" width="0.0298%" height="15" fill="rgb(238,219,53)" fg:x="20158" fg:w="6"/><text x="100.2202%" y="511.50"></text></g><g><title>bprm_execve (6 samples, 0.03%)</title><rect x="99.9702%" y="485" width="0.0298%" height="15" fill="rgb(232,167,36)" fg:x="20158" fg:w="6"/><text x="100.2202%" y="495.50"></text></g><g><title>load_elf_binary (6 samples, 0.03%)</title><rect x="99.9702%" y="469" width="0.0298%" height="15" fill="rgb(244,19,51)" fg:x="20158" fg:w="6"/><text x="100.2202%" y="479.50"></text></g><g><title>begin_new_exec (6 samples, 0.03%)</title><rect x="99.9702%" y="453" width="0.0298%" height="15" fill="rgb(224,6,22)" fg:x="20158" fg:w="6"/><text x="100.2202%" y="463.50"></text></g><g><title>perf_event_exec (5 samples, 0.02%)</title><rect x="99.9752%" y="437" width="0.0248%" height="15" fill="rgb(224,145,5)" fg:x="20159" fg:w="5"/><text x="100.2252%" y="447.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 0.02%)</title><rect x="99.9752%" y="421" width="0.0248%" height="15" fill="rgb(234,130,49)" fg:x="20159" fg:w="5"/><text x="100.2252%" y="431.50"></text></g><g><title>native_write_msr (5 samples, 0.02%)</title><rect x="99.9752%" y="405" width="0.0248%" height="15" fill="rgb(254,6,2)" fg:x="20159" fg:w="5"/><text x="100.2252%" y="415.50"></text></g></svg></svg>