<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="533.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="533.00"> </text><svg id="frames" x="10" width="1180" total_samples="21867"><g><title>[libc-2.31.so] (44 samples, 0.20%)</title><rect x="0.0000%" y="453" width="0.2012%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="44"/><text x="0.2500%" y="463.50"></text></g><g><title>__rust_probestack (7 samples, 0.03%)</title><rect x="0.2012%" y="453" width="0.0320%" height="15" fill="rgb(217,0,24)" fg:x="44" fg:w="7"/><text x="0.4512%" y="463.50"></text></g><g><title>cfree (61 samples, 0.28%)</title><rect x="0.2332%" y="453" width="0.2790%" height="15" fill="rgb(221,193,54)" fg:x="51" fg:w="61"/><text x="0.4832%" y="463.50"></text></g><g><title>malachite_nz::natural::arithmetic::mul::limb::&lt;impl malachite_nz::natural::Natural&gt;::mul_assign_limb (20 samples, 0.09%)</title><rect x="0.5122%" y="453" width="0.0915%" height="15" fill="rgb(248,212,6)" fg:x="112" fg:w="20"/><text x="0.7622%" y="463.50"></text></g><g><title>malachite_nz::natural::conversion::digits::general_digits::limbs_to_digits_small_base_basecase (204 samples, 0.93%)</title><rect x="0.6036%" y="453" width="0.9329%" height="15" fill="rgb(208,68,35)" fg:x="132" fg:w="204"/><text x="0.8536%" y="463.50"></text></g><g><title>[[heap]] (454 samples, 2.08%)</title><rect x="0.0000%" y="469" width="2.0762%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="454"/><text x="0.2500%" y="479.50">[..</text></g><g><title>malachite_nz::natural::conversion::digits::general_digits::to_digits_asc_unsigned (118 samples, 0.54%)</title><rect x="1.5366%" y="453" width="0.5396%" height="15" fill="rgb(207,160,47)" fg:x="336" fg:w="118"/><text x="1.7866%" y="463.50"></text></g><g><title>[libc-2.31.so] (156 samples, 0.71%)</title><rect x="2.0762%" y="453" width="0.7134%" height="15" fill="rgb(228,23,34)" fg:x="454" fg:w="156"/><text x="2.3262%" y="463.50"></text></g><g><title>__libc_malloc (3 samples, 0.01%)</title><rect x="2.7896%" y="453" width="0.0137%" height="15" fill="rgb(218,30,26)" fg:x="610" fg:w="3"/><text x="3.0396%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (85 samples, 0.39%)</title><rect x="2.8033%" y="453" width="0.3887%" height="15" fill="rgb(220,122,19)" fg:x="613" fg:w="85"/><text x="3.0533%" y="463.50"></text></g><g><title>malachite_base::num::conversion::digits::general_digits::to_digits_asc (88 samples, 0.40%)</title><rect x="3.1920%" y="453" width="0.4024%" height="15" fill="rgb(250,228,42)" fg:x="698" fg:w="88"/><text x="3.4420%" y="463.50"></text></g><g><title>malachite_nz::natural::arithmetic::mul::&lt;impl core::ops::arith::MulAssign for malachite_nz::natural::Natural&gt;::mul_assign (19 samples, 0.09%)</title><rect x="3.5945%" y="453" width="0.0869%" height="15" fill="rgb(240,193,28)" fg:x="786" fg:w="19"/><text x="3.8445%" y="463.50"></text></g><g><title>malachite_nz::natural::arithmetic::mul::limb::&lt;impl malachite_nz::natural::Natural&gt;::mul_assign_limb (17 samples, 0.08%)</title><rect x="3.6813%" y="453" width="0.0777%" height="15" fill="rgb(216,20,37)" fg:x="805" fg:w="17"/><text x="3.9313%" y="463.50"></text></g><g><title>malachite_nz::natural::conversion::digits::general_digits::to_digits_asc_unsigned (39 samples, 0.18%)</title><rect x="3.7637%" y="453" width="0.1784%" height="15" fill="rgb(206,188,39)" fg:x="823" fg:w="39"/><text x="4.0137%" y="463.50"></text></g><g><title>[[stack]] (496 samples, 2.27%)</title><rect x="2.0762%" y="469" width="2.2683%" height="15" fill="rgb(217,207,13)" fg:x="454" fg:w="496"/><text x="2.3262%" y="479.50">[..</text></g><g><title>nice_rust::get_num_uniques (88 samples, 0.40%)</title><rect x="3.9420%" y="453" width="0.4024%" height="15" fill="rgb(231,73,38)" fg:x="862" fg:w="88"/><text x="4.1920%" y="463.50"></text></g><g><title>[libc-2.31.so] (60 samples, 0.27%)</title><rect x="4.3444%" y="453" width="0.2744%" height="15" fill="rgb(225,20,46)" fg:x="950" fg:w="60"/><text x="4.5944%" y="463.50"></text></g><g><title>__libc_calloc (10 samples, 0.05%)</title><rect x="4.6188%" y="453" width="0.0457%" height="15" fill="rgb(210,31,41)" fg:x="1010" fg:w="10"/><text x="4.8688%" y="463.50"></text></g><g><title>__libc_malloc (22 samples, 0.10%)</title><rect x="4.6646%" y="453" width="0.1006%" height="15" fill="rgb(221,200,47)" fg:x="1020" fg:w="22"/><text x="4.9146%" y="463.50"></text></g><g><title>__rdl_alloc_zeroed (10 samples, 0.05%)</title><rect x="4.7697%" y="453" width="0.0457%" height="15" fill="rgb(226,26,5)" fg:x="1043" fg:w="10"/><text x="5.0197%" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (10 samples, 0.05%)</title><rect x="4.7697%" y="437" width="0.0457%" height="15" fill="rgb(249,33,26)" fg:x="1043" fg:w="10"/><text x="5.0197%" y="447.50"></text></g><g><title>malachite_base::num::conversion::digits::general_digits::to_digits_asc (14 samples, 0.06%)</title><rect x="4.8155%" y="453" width="0.0640%" height="15" fill="rgb(235,183,28)" fg:x="1053" fg:w="14"/><text x="5.0655%" y="463.50"></text></g><g><title>malachite_nz::natural::arithmetic::div_mod::limbs_div_mod_extra_in_place (53 samples, 0.24%)</title><rect x="4.8795%" y="453" width="0.2424%" height="15" fill="rgb(221,5,38)" fg:x="1067" fg:w="53"/><text x="5.1295%" y="463.50"></text></g><g><title>malachite_nz::natural::conversion::digits::general_digits::get_big_base (11 samples, 0.05%)</title><rect x="5.1219%" y="453" width="0.0503%" height="15" fill="rgb(247,18,42)" fg:x="1120" fg:w="11"/><text x="5.3719%" y="463.50"></text></g><g><title>malachite_nz::natural::conversion::digits::general_digits::get_big_base_inverted (40 samples, 0.18%)</title><rect x="5.1722%" y="453" width="0.1829%" height="15" fill="rgb(241,131,45)" fg:x="1131" fg:w="40"/><text x="5.4222%" y="463.50"></text></g><g><title>[anon] (258 samples, 1.18%)</title><rect x="4.3444%" y="469" width="1.1799%" height="15" fill="rgb(249,31,29)" fg:x="950" fg:w="258"/><text x="4.5944%" y="479.50"></text></g><g><title>malachite_nz::natural::conversion::digits::general_digits::limbs_to_digits_small_base_basecase (36 samples, 0.16%)</title><rect x="5.3597%" y="453" width="0.1646%" height="15" fill="rgb(225,111,53)" fg:x="1172" fg:w="36"/><text x="5.6097%" y="463.50"></text></g><g><title>[libc-2.31.so] (388 samples, 1.77%)</title><rect x="5.5335%" y="453" width="1.7744%" height="15" fill="rgb(238,160,17)" fg:x="1210" fg:w="388"/><text x="5.7835%" y="463.50">[..</text></g><g><title>__libc_calloc (84 samples, 0.38%)</title><rect x="7.3078%" y="453" width="0.3841%" height="15" fill="rgb(214,148,48)" fg:x="1598" fg:w="84"/><text x="7.5578%" y="463.50"></text></g><g><title>__libc_malloc (59 samples, 0.27%)</title><rect x="7.6920%" y="453" width="0.2698%" height="15" fill="rgb(232,36,49)" fg:x="1682" fg:w="59"/><text x="7.9420%" y="463.50"></text></g><g><title>__rdl_alloc (17 samples, 0.08%)</title><rect x="7.9618%" y="453" width="0.0777%" height="15" fill="rgb(209,103,24)" fg:x="1741" fg:w="17"/><text x="8.2118%" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (15 samples, 0.07%)</title><rect x="7.9709%" y="437" width="0.0686%" height="15" fill="rgb(229,88,8)" fg:x="1743" fg:w="15"/><text x="8.2209%" y="447.50"></text></g><g><title>__rdl_alloc_zeroed (10 samples, 0.05%)</title><rect x="8.0395%" y="453" width="0.0457%" height="15" fill="rgb(213,181,19)" fg:x="1758" fg:w="10"/><text x="8.2895%" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (9 samples, 0.04%)</title><rect x="8.0441%" y="437" width="0.0412%" height="15" fill="rgb(254,191,54)" fg:x="1759" fg:w="9"/><text x="8.2941%" y="447.50"></text></g><g><title>__rdl_realloc (113 samples, 0.52%)</title><rect x="8.0852%" y="453" width="0.5168%" height="15" fill="rgb(241,83,37)" fg:x="1768" fg:w="113"/><text x="8.3352%" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (45 samples, 0.21%)</title><rect x="8.3962%" y="437" width="0.2058%" height="15" fill="rgb(233,36,39)" fg:x="1836" fg:w="45"/><text x="8.6462%" y="447.50"></text></g><g><title>__rust_probestack (11 samples, 0.05%)</title><rect x="8.6020%" y="453" width="0.0503%" height="15" fill="rgb(226,3,54)" fg:x="1881" fg:w="11"/><text x="8.8520%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (92 samples, 0.42%)</title><rect x="8.6523%" y="453" width="0.4207%" height="15" fill="rgb(245,192,40)" fg:x="1892" fg:w="92"/><text x="8.9023%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (145 samples, 0.66%)</title><rect x="9.0730%" y="453" width="0.6631%" height="15" fill="rgb(238,167,29)" fg:x="1984" fg:w="145"/><text x="9.3230%" y="463.50"></text></g><g><title>cfree (78 samples, 0.36%)</title><rect x="9.7361%" y="453" width="0.3567%" height="15" fill="rgb(232,182,51)" fg:x="2129" fg:w="78"/><text x="9.9861%" y="463.50"></text></g><g><title>malachite_base::num::conversion::digits::general_digits::to_digits_asc (18 samples, 0.08%)</title><rect x="10.0928%" y="453" width="0.0823%" height="15" fill="rgb(231,60,39)" fg:x="2207" fg:w="18"/><text x="10.3428%" y="463.50"></text></g><g><title>malachite_nz::natural::arithmetic::div_mod::limbs_div_mod_extra_in_place (58 samples, 0.27%)</title><rect x="10.1751%" y="453" width="0.2652%" height="15" fill="rgb(208,69,12)" fg:x="2225" fg:w="58"/><text x="10.4251%" y="463.50"></text></g><g><title>malachite_nz::natural::arithmetic::mul::&lt;impl core::ops::arith::MulAssign for malachite_nz::natural::Natural&gt;::mul_assign (29 samples, 0.13%)</title><rect x="10.4404%" y="453" width="0.1326%" height="15" fill="rgb(235,93,37)" fg:x="2283" fg:w="29"/><text x="10.6904%" y="463.50"></text></g><g><title>malachite_nz::natural::conversion::digits::general_digits::limbs_to_digits_small_base_basecase (29 samples, 0.13%)</title><rect x="10.5822%" y="453" width="0.1326%" height="15" fill="rgb(213,116,39)" fg:x="2314" fg:w="29"/><text x="10.8322%" y="463.50"></text></g><g><title>malachite_nz::natural::conversion::digits::general_digits::to_digits_asc_unsigned (75 samples, 0.34%)</title><rect x="10.7148%" y="453" width="0.3430%" height="15" fill="rgb(222,207,29)" fg:x="2343" fg:w="75"/><text x="10.9648%" y="463.50"></text></g><g><title>malachite_nz::natural::conversion::from_limbs::&lt;impl malachite_nz::natural::Natural&gt;::from_owned_limbs_asc (30 samples, 0.14%)</title><rect x="11.0578%" y="453" width="0.1372%" height="15" fill="rgb(206,96,30)" fg:x="2418" fg:w="30"/><text x="11.3078%" y="463.50"></text></g><g><title>nice_rust::get_num_uniques (24 samples, 0.11%)</title><rect x="11.1950%" y="453" width="0.1098%" height="15" fill="rgb(218,138,4)" fg:x="2448" fg:w="24"/><text x="11.4450%" y="463.50"></text></g><g><title>nice_rust::main (30 samples, 0.14%)</title><rect x="11.3047%" y="453" width="0.1372%" height="15" fill="rgb(250,191,14)" fg:x="2472" fg:w="30"/><text x="11.5547%" y="463.50"></text></g><g><title>[unknown] (1,439 samples, 6.58%)</title><rect x="5.5289%" y="469" width="6.5807%" height="15" fill="rgb(239,60,40)" fg:x="1209" fg:w="1439"/><text x="5.7789%" y="479.50">[unknown]</text></g><g><title>realloc (146 samples, 0.67%)</title><rect x="11.4419%" y="453" width="0.6677%" height="15" fill="rgb(206,27,48)" fg:x="2502" fg:w="146"/><text x="11.6919%" y="463.50"></text></g><g><title>[libc-2.31.so] (200 samples, 0.91%)</title><rect x="13.6919%" y="213" width="0.9146%" height="15" fill="rgb(225,35,8)" fg:x="2994" fg:w="200"/><text x="13.9419%" y="223.50"></text></g><g><title>__libc_calloc (442 samples, 2.02%)</title><rect x="12.5897%" y="229" width="2.0213%" height="15" fill="rgb(250,213,24)" fg:x="2753" fg:w="442"/><text x="12.8397%" y="239.50">_..</text></g><g><title>__rdl_alloc_zeroed (41 samples, 0.19%)</title><rect x="14.6111%" y="229" width="0.1875%" height="15" fill="rgb(247,123,22)" fg:x="3195" fg:w="41"/><text x="14.8611%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (27 samples, 0.12%)</title><rect x="14.6751%" y="213" width="0.1235%" height="15" fill="rgb(231,138,38)" fg:x="3209" fg:w="27"/><text x="14.9251%" y="223.50"></text></g><g><title>__rust_alloc_zeroed (10 samples, 0.05%)</title><rect x="14.7986%" y="229" width="0.0457%" height="15" fill="rgb(231,145,46)" fg:x="3236" fg:w="10"/><text x="15.0486%" y="239.50"></text></g><g><title>[libc-2.31.so] (285 samples, 1.30%)</title><rect x="15.4754%" y="213" width="1.3033%" height="15" fill="rgb(251,118,11)" fg:x="3384" fg:w="285"/><text x="15.7254%" y="223.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (5 samples, 0.02%)</title><rect x="16.7558%" y="197" width="0.0229%" height="15" fill="rgb(217,147,25)" fg:x="3664" fg:w="5"/><text x="17.0058%" y="207.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.02%)</title><rect x="16.7558%" y="181" width="0.0229%" height="15" fill="rgb(247,81,37)" fg:x="3664" fg:w="5"/><text x="17.0058%" y="191.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.02%)</title><rect x="16.7558%" y="165" width="0.0229%" height="15" fill="rgb(209,12,38)" fg:x="3664" fg:w="5"/><text x="17.0058%" y="175.50"></text></g><g><title>schedule (5 samples, 0.02%)</title><rect x="16.7558%" y="149" width="0.0229%" height="15" fill="rgb(227,1,9)" fg:x="3664" fg:w="5"/><text x="17.0058%" y="159.50"></text></g><g><title>__schedule (5 samples, 0.02%)</title><rect x="16.7558%" y="133" width="0.0229%" height="15" fill="rgb(248,47,43)" fg:x="3664" fg:w="5"/><text x="17.0058%" y="143.50"></text></g><g><title>finish_task_switch (5 samples, 0.02%)</title><rect x="16.7558%" y="117" width="0.0229%" height="15" fill="rgb(221,10,30)" fg:x="3664" fg:w="5"/><text x="17.0058%" y="127.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.02%)</title><rect x="16.7558%" y="101" width="0.0229%" height="15" fill="rgb(210,229,1)" fg:x="3664" fg:w="5"/><text x="17.0058%" y="111.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 0.02%)</title><rect x="16.7558%" y="85" width="0.0229%" height="15" fill="rgb(222,148,37)" fg:x="3664" fg:w="5"/><text x="17.0058%" y="95.50"></text></g><g><title>native_write_msr (5 samples, 0.02%)</title><rect x="16.7558%" y="69" width="0.0229%" height="15" fill="rgb(234,67,33)" fg:x="3664" fg:w="5"/><text x="17.0058%" y="79.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.01%)</title><rect x="16.7787%" y="213" width="0.0137%" height="15" fill="rgb(247,98,35)" fg:x="3669" fg:w="3"/><text x="17.0287%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.01%)</title><rect x="16.7787%" y="197" width="0.0137%" height="15" fill="rgb(247,138,52)" fg:x="3669" fg:w="3"/><text x="17.0287%" y="207.50"></text></g><g><title>__rust_dealloc (5 samples, 0.02%)</title><rect x="16.7924%" y="213" width="0.0229%" height="15" fill="rgb(213,79,30)" fg:x="3672" fg:w="5"/><text x="17.0424%" y="223.50"></text></g><g><title>malachite_nz::natural::conversion::from_limbs::&lt;impl malachite_nz::natural::Natural&gt;::from_owned_limbs_asc (500 samples, 2.29%)</title><rect x="14.8443%" y="229" width="2.2866%" height="15" fill="rgb(246,177,23)" fg:x="3246" fg:w="500"/><text x="15.0943%" y="239.50">m..</text></g><g><title>cfree (69 samples, 0.32%)</title><rect x="16.8153%" y="213" width="0.3155%" height="15" fill="rgb(230,62,27)" fg:x="3677" fg:w="69"/><text x="17.0653%" y="223.50"></text></g><g><title>[libc-2.31.so] (830 samples, 3.80%)</title><rect x="22.9295%" y="213" width="3.7957%" height="15" fill="rgb(216,154,8)" fg:x="5014" fg:w="830"/><text x="23.1795%" y="223.50">[lib..</text></g><g><title>__rdl_dealloc (8 samples, 0.04%)</title><rect x="26.7252%" y="213" width="0.0366%" height="15" fill="rgb(244,35,45)" fg:x="5844" fg:w="8"/><text x="26.9752%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (8 samples, 0.04%)</title><rect x="26.7252%" y="197" width="0.0366%" height="15" fill="rgb(251,115,12)" fg:x="5844" fg:w="8"/><text x="26.9752%" y="207.50"></text></g><g><title>__rust_dealloc (15 samples, 0.07%)</title><rect x="26.7618%" y="213" width="0.0686%" height="15" fill="rgb(240,54,50)" fg:x="5852" fg:w="15"/><text x="27.0118%" y="223.50"></text></g><g><title>cfree (147 samples, 0.67%)</title><rect x="26.8395%" y="213" width="0.6722%" height="15" fill="rgb(233,84,52)" fg:x="5869" fg:w="147"/><text x="27.0895%" y="223.50"></text></g><g><title>__libc_malloc (164 samples, 0.75%)</title><rect x="28.3349%" y="181" width="0.7500%" height="15" fill="rgb(207,117,47)" fg:x="6196" fg:w="164"/><text x="28.5849%" y="191.50"></text></g><g><title>__rdl_alloc (23 samples, 0.11%)</title><rect x="29.0849%" y="181" width="0.1052%" height="15" fill="rgb(249,43,39)" fg:x="6360" fg:w="23"/><text x="29.3349%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (23 samples, 0.11%)</title><rect x="29.0849%" y="165" width="0.1052%" height="15" fill="rgb(209,38,44)" fg:x="6360" fg:w="23"/><text x="29.3349%" y="175.50"></text></g><g><title>malachite_nz::natural::arithmetic::mul::&lt;impl core::ops::arith::MulAssign for malachite_nz::natural::Natural&gt;::mul_assign (370 samples, 1.69%)</title><rect x="27.5118%" y="213" width="1.6920%" height="15" fill="rgb(236,212,23)" fg:x="6016" fg:w="370"/><text x="27.7618%" y="223.50"></text></g><g><title>malachite_nz::natural::arithmetic::mul::limb::&lt;impl malachite_nz::natural::Natural&gt;::mul_assign_limb (308 samples, 1.41%)</title><rect x="27.7953%" y="197" width="1.4085%" height="15" fill="rgb(242,79,21)" fg:x="6078" fg:w="308"/><text x="28.0453%" y="207.50"></text></g><g><title>__rust_alloc (3 samples, 0.01%)</title><rect x="29.1901%" y="181" width="0.0137%" height="15" fill="rgb(211,96,35)" fg:x="6383" fg:w="3"/><text x="29.4401%" y="191.50"></text></g><g><title>[libc-2.31.so] (300 samples, 1.37%)</title><rect x="33.5986%" y="197" width="1.3719%" height="15" fill="rgb(253,215,40)" fg:x="7347" fg:w="300"/><text x="33.8486%" y="207.50"></text></g><g><title>__libc_calloc (429 samples, 1.96%)</title><rect x="34.9705%" y="197" width="1.9619%" height="15" fill="rgb(211,81,21)" fg:x="7647" fg:w="429"/><text x="35.2205%" y="207.50">_..</text></g><g><title>[libc-2.31.so] (181 samples, 0.83%)</title><rect x="36.1046%" y="181" width="0.8277%" height="15" fill="rgb(208,190,38)" fg:x="7895" fg:w="181"/><text x="36.3546%" y="191.50"></text></g><g><title>__libc_malloc (102 samples, 0.47%)</title><rect x="36.9324%" y="197" width="0.4665%" height="15" fill="rgb(235,213,38)" fg:x="8076" fg:w="102"/><text x="37.1824%" y="207.50"></text></g><g><title>__rdl_alloc (36 samples, 0.16%)</title><rect x="37.3988%" y="197" width="0.1646%" height="15" fill="rgb(237,122,38)" fg:x="8178" fg:w="36"/><text x="37.6488%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (33 samples, 0.15%)</title><rect x="37.4125%" y="181" width="0.1509%" height="15" fill="rgb(244,218,35)" fg:x="8181" fg:w="33"/><text x="37.6625%" y="191.50"></text></g><g><title>__rdl_alloc_zeroed (30 samples, 0.14%)</title><rect x="37.5635%" y="197" width="0.1372%" height="15" fill="rgb(240,68,47)" fg:x="8214" fg:w="30"/><text x="37.8135%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (19 samples, 0.09%)</title><rect x="37.6138%" y="181" width="0.0869%" height="15" fill="rgb(210,16,53)" fg:x="8225" fg:w="19"/><text x="37.8638%" y="191.50"></text></g><g><title>__rdl_dealloc (7 samples, 0.03%)</title><rect x="37.7006%" y="197" width="0.0320%" height="15" fill="rgb(235,124,12)" fg:x="8244" fg:w="7"/><text x="37.9506%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (7 samples, 0.03%)</title><rect x="37.7006%" y="181" width="0.0320%" height="15" fill="rgb(224,169,11)" fg:x="8244" fg:w="7"/><text x="37.9506%" y="191.50"></text></g><g><title>__rust_alloc (7 samples, 0.03%)</title><rect x="37.7327%" y="197" width="0.0320%" height="15" fill="rgb(250,166,2)" fg:x="8251" fg:w="7"/><text x="37.9827%" y="207.50"></text></g><g><title>__rust_alloc_zeroed (6 samples, 0.03%)</title><rect x="37.7647%" y="197" width="0.0274%" height="15" fill="rgb(242,216,29)" fg:x="8258" fg:w="6"/><text x="38.0147%" y="207.50"></text></g><g><title>__rust_dealloc (8 samples, 0.04%)</title><rect x="37.7921%" y="197" width="0.0366%" height="15" fill="rgb(230,116,27)" fg:x="8264" fg:w="8"/><text x="38.0421%" y="207.50"></text></g><g><title>cfree (151 samples, 0.69%)</title><rect x="37.8333%" y="197" width="0.6905%" height="15" fill="rgb(228,99,48)" fg:x="8273" fg:w="151"/><text x="38.0833%" y="207.50"></text></g><g><title>__libc_malloc (296 samples, 1.35%)</title><rect x="52.9519%" y="149" width="1.3536%" height="15" fill="rgb(253,11,6)" fg:x="11579" fg:w="296"/><text x="53.2019%" y="159.50"></text></g><g><title>__rdl_alloc (95 samples, 0.43%)</title><rect x="54.3056%" y="149" width="0.4344%" height="15" fill="rgb(247,143,39)" fg:x="11875" fg:w="95"/><text x="54.5556%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (87 samples, 0.40%)</title><rect x="54.3422%" y="133" width="0.3979%" height="15" fill="rgb(236,97,10)" fg:x="11883" fg:w="87"/><text x="54.5922%" y="143.50"></text></g><g><title>__rdl_realloc (207 samples, 0.95%)</title><rect x="54.7400%" y="149" width="0.9466%" height="15" fill="rgb(233,208,19)" fg:x="11970" fg:w="207"/><text x="54.9900%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (127 samples, 0.58%)</title><rect x="55.1059%" y="133" width="0.5808%" height="15" fill="rgb(216,164,2)" fg:x="12050" fg:w="127"/><text x="55.3559%" y="143.50"></text></g><g><title>__rust_alloc (54 samples, 0.25%)</title><rect x="55.6867%" y="149" width="0.2469%" height="15" fill="rgb(220,129,5)" fg:x="12177" fg:w="54"/><text x="55.9367%" y="159.50"></text></g><g><title>__rust_realloc (30 samples, 0.14%)</title><rect x="55.9336%" y="149" width="0.1372%" height="15" fill="rgb(242,17,10)" fg:x="12231" fg:w="30"/><text x="56.1836%" y="159.50"></text></g><g><title>@plt (4 samples, 0.02%)</title><rect x="60.1043%" y="117" width="0.0183%" height="15" fill="rgb(242,107,0)" fg:x="13143" fg:w="4"/><text x="60.3543%" y="127.50"></text></g><g><title>[libc-2.31.so] (161 samples, 0.74%)</title><rect x="63.1957%" y="101" width="0.7363%" height="15" fill="rgb(251,28,31)" fg:x="13819" fg:w="161"/><text x="63.4457%" y="111.50"></text></g><g><title>[libc-2.31.so] (1,159 samples, 5.30%)</title><rect x="58.6363%" y="133" width="5.3002%" height="15" fill="rgb(233,223,10)" fg:x="12822" fg:w="1159"/><text x="58.8863%" y="143.50">[libc-..</text></g><g><title>[libc-2.31.so] (834 samples, 3.81%)</title><rect x="60.1226%" y="117" width="3.8140%" height="15" fill="rgb(215,21,27)" fg:x="13147" fg:w="834"/><text x="60.3726%" y="127.50">[lib..</text></g><g><title>alloc::raw_vec::finish_grow (2,894 samples, 13.23%)</title><rect x="50.7065%" y="165" width="13.2346%" height="15" fill="rgb(232,23,21)" fg:x="11088" fg:w="2894"/><text x="50.9565%" y="175.50">alloc::raw_vec::fini..</text></g><g><title>realloc (1,721 samples, 7.87%)</title><rect x="56.0708%" y="149" width="7.8703%" height="15" fill="rgb(244,5,23)" fg:x="12261" fg:w="1721"/><text x="56.3208%" y="159.50">realloc</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3,431 samples, 15.69%)</title><rect x="48.2554%" y="181" width="15.6903%" height="15" fill="rgb(226,81,46)" fg:x="10552" fg:w="3431"/><text x="48.5054%" y="191.50">alloc::raw_vec::RawVec&lt;T..</text></g><g><title>__hrtimer_run_queues (3 samples, 0.01%)</title><rect x="63.9457%" y="117" width="0.0137%" height="15" fill="rgb(247,70,30)" fg:x="13983" fg:w="3"/><text x="64.1957%" y="127.50"></text></g><g><title>tick_sched_timer (3 samples, 0.01%)</title><rect x="63.9457%" y="101" width="0.0137%" height="15" fill="rgb(212,68,19)" fg:x="13983" fg:w="3"/><text x="64.1957%" y="111.50"></text></g><g><title>tick_sched_handle (3 samples, 0.01%)</title><rect x="63.9457%" y="85" width="0.0137%" height="15" fill="rgb(240,187,13)" fg:x="13983" fg:w="3"/><text x="64.1957%" y="95.50"></text></g><g><title>update_process_times (3 samples, 0.01%)</title><rect x="63.9457%" y="69" width="0.0137%" height="15" fill="rgb(223,113,26)" fg:x="13983" fg:w="3"/><text x="64.1957%" y="79.50"></text></g><g><title>scheduler_tick (3 samples, 0.01%)</title><rect x="63.9457%" y="53" width="0.0137%" height="15" fill="rgb(206,192,2)" fg:x="13983" fg:w="3"/><text x="64.1957%" y="63.50"></text></g><g><title>task_tick_fair (3 samples, 0.01%)</title><rect x="63.9457%" y="37" width="0.0137%" height="15" fill="rgb(241,108,4)" fg:x="13983" fg:w="3"/><text x="64.1957%" y="47.50"></text></g><g><title>malachite_base::num::conversion::digits::general_digits::to_digits_asc (5,563 samples, 25.44%)</title><rect x="38.5238%" y="197" width="25.4402%" height="15" fill="rgb(247,173,49)" fg:x="8424" fg:w="5563"/><text x="38.7738%" y="207.50">malachite_base::num::conversion::digits::..</text></g><g><title>asm_sysvec_apic_timer_interrupt (4 samples, 0.02%)</title><rect x="63.9457%" y="181" width="0.0183%" height="15" fill="rgb(224,114,35)" fg:x="13983" fg:w="4"/><text x="64.1957%" y="191.50"></text></g><g><title>sysvec_apic_timer_interrupt (4 samples, 0.02%)</title><rect x="63.9457%" y="165" width="0.0183%" height="15" fill="rgb(245,159,27)" fg:x="13983" fg:w="4"/><text x="64.1957%" y="175.50"></text></g><g><title>__sysvec_apic_timer_interrupt (4 samples, 0.02%)</title><rect x="63.9457%" y="149" width="0.0183%" height="15" fill="rgb(245,172,44)" fg:x="13983" fg:w="4"/><text x="64.1957%" y="159.50"></text></g><g><title>hrtimer_interrupt (4 samples, 0.02%)</title><rect x="63.9457%" y="133" width="0.0183%" height="15" fill="rgb(236,23,11)" fg:x="13983" fg:w="4"/><text x="64.1957%" y="143.50"></text></g><g><title>malachite_nz::natural::conversion::digits::general_digits::limbs_digit_count (183 samples, 0.84%)</title><rect x="63.9640%" y="197" width="0.8369%" height="15" fill="rgb(205,117,38)" fg:x="13987" fg:w="183"/><text x="64.2140%" y="207.50"></text></g><g><title>[libc-2.31.so] (5,563 samples, 25.44%)</title><rect x="72.0538%" y="181" width="25.4402%" height="15" fill="rgb(237,72,25)" fg:x="15756" fg:w="5563"/><text x="72.3038%" y="191.50">[libc-2.31.so]</text></g><g><title>asm_sysvec_apic_timer_interrupt (5 samples, 0.02%)</title><rect x="97.4711%" y="165" width="0.0229%" height="15" fill="rgb(244,70,9)" fg:x="21314" fg:w="5"/><text x="97.7211%" y="175.50"></text></g><g><title>sysvec_apic_timer_interrupt (4 samples, 0.02%)</title><rect x="97.4756%" y="149" width="0.0183%" height="15" fill="rgb(217,125,39)" fg:x="21315" fg:w="4"/><text x="97.7256%" y="159.50"></text></g><g><title>__rust_probestack (91 samples, 0.42%)</title><rect x="97.4939%" y="181" width="0.4162%" height="15" fill="rgb(235,36,10)" fg:x="21319" fg:w="91"/><text x="97.7439%" y="191.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (3 samples, 0.01%)</title><rect x="97.9101%" y="181" width="0.0137%" height="15" fill="rgb(251,123,47)" fg:x="21410" fg:w="3"/><text x="98.1601%" y="191.50"></text></g><g><title>malachite_nz::natural::arithmetic::div_mod::limbs_div_mod_extra_in_place (372 samples, 1.70%)</title><rect x="97.9238%" y="181" width="1.7012%" height="15" fill="rgb(221,13,13)" fg:x="21413" fg:w="372"/><text x="98.1738%" y="191.50"></text></g><g><title>malachite_nz::natural::conversion::digits::general_digits::get_big_base (15 samples, 0.07%)</title><rect x="99.6250%" y="181" width="0.0686%" height="15" fill="rgb(238,131,9)" fg:x="21785" fg:w="15"/><text x="99.8750%" y="191.50"></text></g><g><title>malachite_nz::natural::conversion::digits::general_digits::get_big_base_inverted (50 samples, 0.23%)</title><rect x="99.6936%" y="181" width="0.2287%" height="15" fill="rgb(211,50,8)" fg:x="21800" fg:w="50"/><text x="99.9436%" y="191.50"></text></g><g><title>_start (19,212 samples, 87.86%)</title><rect x="12.1096%" y="469" width="87.8584%" height="15" fill="rgb(245,182,24)" fg:x="2648" fg:w="19212"/><text x="12.3596%" y="479.50">_start</text></g><g><title>__libc_start_main (19,212 samples, 87.86%)</title><rect x="12.1096%" y="453" width="87.8584%" height="15" fill="rgb(242,14,37)" fg:x="2648" fg:w="19212"/><text x="12.3596%" y="463.50">__libc_start_main</text></g><g><title>main (19,212 samples, 87.86%)</title><rect x="12.1096%" y="437" width="87.8584%" height="15" fill="rgb(246,228,12)" fg:x="2648" fg:w="19212"/><text x="12.3596%" y="447.50">main</text></g><g><title>std::rt::lang_start_internal (19,212 samples, 87.86%)</title><rect x="12.1096%" y="421" width="87.8584%" height="15" fill="rgb(213,55,15)" fg:x="2648" fg:w="19212"/><text x="12.3596%" y="431.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (19,212 samples, 87.86%)</title><rect x="12.1096%" y="405" width="87.8584%" height="15" fill="rgb(209,9,3)" fg:x="2648" fg:w="19212"/><text x="12.3596%" y="415.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (19,212 samples, 87.86%)</title><rect x="12.1096%" y="389" width="87.8584%" height="15" fill="rgb(230,59,30)" fg:x="2648" fg:w="19212"/><text x="12.3596%" y="399.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (19,212 samples, 87.86%)</title><rect x="12.1096%" y="373" width="87.8584%" height="15" fill="rgb(209,121,21)" fg:x="2648" fg:w="19212"/><text x="12.3596%" y="383.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (19,212 samples, 87.86%)</title><rect x="12.1096%" y="357" width="87.8584%" height="15" fill="rgb(220,109,13)" fg:x="2648" fg:w="19212"/><text x="12.3596%" y="367.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (19,212 samples, 87.86%)</title><rect x="12.1096%" y="341" width="87.8584%" height="15" fill="rgb(232,18,1)" fg:x="2648" fg:w="19212"/><text x="12.3596%" y="351.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (19,212 samples, 87.86%)</title><rect x="12.1096%" y="325" width="87.8584%" height="15" fill="rgb(215,41,42)" fg:x="2648" fg:w="19212"/><text x="12.3596%" y="335.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (19,212 samples, 87.86%)</title><rect x="12.1096%" y="309" width="87.8584%" height="15" fill="rgb(224,123,36)" fg:x="2648" fg:w="19212"/><text x="12.3596%" y="319.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (19,212 samples, 87.86%)</title><rect x="12.1096%" y="293" width="87.8584%" height="15" fill="rgb(240,125,3)" fg:x="2648" fg:w="19212"/><text x="12.3596%" y="303.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (19,212 samples, 87.86%)</title><rect x="12.1096%" y="277" width="87.8584%" height="15" fill="rgb(205,98,50)" fg:x="2648" fg:w="19212"/><text x="12.3596%" y="287.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (19,212 samples, 87.86%)</title><rect x="12.1096%" y="261" width="87.8584%" height="15" fill="rgb(205,185,37)" fg:x="2648" fg:w="19212"/><text x="12.3596%" y="271.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>nice_rust::main (19,212 samples, 87.86%)</title><rect x="12.1096%" y="245" width="87.8584%" height="15" fill="rgb(238,207,15)" fg:x="2648" fg:w="19212"/><text x="12.3596%" y="255.50">nice_rust::main</text></g><g><title>nice_rust::get_num_uniques (18,114 samples, 82.84%)</title><rect x="17.1308%" y="229" width="82.8372%" height="15" fill="rgb(213,199,42)" fg:x="3746" fg:w="18114"/><text x="17.3808%" y="239.50">nice_rust::get_num_uniques</text></g><g><title>malachite_nz::natural::conversion::digits::general_digits::to_digits_asc_unsigned (15,474 samples, 70.76%)</title><rect x="29.2038%" y="213" width="70.7642%" height="15" fill="rgb(235,201,11)" fg:x="6386" fg:w="15474"/><text x="29.4538%" y="223.50">malachite_nz::natural::conversion::digits::general_digits::to_digits_asc_unsigned</text></g><g><title>malachite_nz::natural::conversion::digits::general_digits::limbs_to_digits_small_base_basecase (7,690 samples, 35.17%)</title><rect x="64.8008%" y="197" width="35.1671%" height="15" fill="rgb(207,46,11)" fg:x="14170" fg:w="7690"/><text x="65.0508%" y="207.50">malachite_nz::natural::conversion::digits::general_digits..</text></g><g><title>malachite_nz::natural::conversion::digits::general_digits::get_chars_per_limb (10 samples, 0.05%)</title><rect x="99.9223%" y="181" width="0.0457%" height="15" fill="rgb(241,35,35)" fg:x="21850" fg:w="10"/><text x="100.1723%" y="191.50"></text></g><g><title>nice-rust (21,861 samples, 99.97%)</title><rect x="0.0000%" y="485" width="99.9726%" height="15" fill="rgb(243,32,47)" fg:x="0" fg:w="21861"/><text x="0.2500%" y="495.50">nice-rust</text></g><g><title>perf_event_exec (5 samples, 0.02%)</title><rect x="99.9726%" y="357" width="0.0229%" height="15" fill="rgb(247,202,23)" fg:x="21861" fg:w="5"/><text x="100.2226%" y="367.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 0.02%)</title><rect x="99.9726%" y="341" width="0.0229%" height="15" fill="rgb(219,102,11)" fg:x="21861" fg:w="5"/><text x="100.2226%" y="351.50"></text></g><g><title>native_write_msr (5 samples, 0.02%)</title><rect x="99.9726%" y="325" width="0.0229%" height="15" fill="rgb(243,110,44)" fg:x="21861" fg:w="5"/><text x="100.2226%" y="335.50"></text></g><g><title>all (21,867 samples, 100%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(222,74,54)" fg:x="0" fg:w="21867"/><text x="0.2500%" y="511.50"></text></g><g><title>perf_5.10 (6 samples, 0.03%)</title><rect x="99.9726%" y="485" width="0.0274%" height="15" fill="rgb(216,99,12)" fg:x="21861" fg:w="6"/><text x="100.2226%" y="495.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 0.03%)</title><rect x="99.9726%" y="469" width="0.0274%" height="15" fill="rgb(226,22,26)" fg:x="21861" fg:w="6"/><text x="100.2226%" y="479.50"></text></g><g><title>do_syscall_64 (6 samples, 0.03%)</title><rect x="99.9726%" y="453" width="0.0274%" height="15" fill="rgb(217,163,10)" fg:x="21861" fg:w="6"/><text x="100.2226%" y="463.50"></text></g><g><title>__x64_sys_execve (6 samples, 0.03%)</title><rect x="99.9726%" y="437" width="0.0274%" height="15" fill="rgb(213,25,53)" fg:x="21861" fg:w="6"/><text x="100.2226%" y="447.50"></text></g><g><title>do_execveat_common (6 samples, 0.03%)</title><rect x="99.9726%" y="421" width="0.0274%" height="15" fill="rgb(252,105,26)" fg:x="21861" fg:w="6"/><text x="100.2226%" y="431.50"></text></g><g><title>bprm_execve (6 samples, 0.03%)</title><rect x="99.9726%" y="405" width="0.0274%" height="15" fill="rgb(220,39,43)" fg:x="21861" fg:w="6"/><text x="100.2226%" y="415.50"></text></g><g><title>load_elf_binary (6 samples, 0.03%)</title><rect x="99.9726%" y="389" width="0.0274%" height="15" fill="rgb(229,68,48)" fg:x="21861" fg:w="6"/><text x="100.2226%" y="399.50"></text></g><g><title>begin_new_exec (6 samples, 0.03%)</title><rect x="99.9726%" y="373" width="0.0274%" height="15" fill="rgb(252,8,32)" fg:x="21861" fg:w="6"/><text x="100.2226%" y="383.50"></text></g></svg></svg>