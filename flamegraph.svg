<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="565.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="6792"><g><title>[libc-2.31.so] (34 samples, 0.50%)</title><rect x="0.0000%" y="485" width="0.5006%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="34"/><text x="0.2500%" y="495.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (93 samples, 1.37%)</title><rect x="0.5006%" y="485" width="1.3693%" height="15" fill="rgb(217,0,24)" fg:x="34" fg:w="93"/><text x="0.7506%" y="495.50"></text></g><g><title>[[heap]] (131 samples, 1.93%)</title><rect x="0.0000%" y="501" width="1.9287%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="131"/><text x="0.2500%" y="511.50">[..</text></g><g><title>malachite_nz::natural::arithmetic::mul::limb::&lt;impl malachite_nz::natural::Natural&gt;::mul_limb_ref (4 samples, 0.06%)</title><rect x="1.8698%" y="485" width="0.0589%" height="15" fill="rgb(248,212,6)" fg:x="127" fg:w="4"/><text x="2.1198%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (19 samples, 0.28%)</title><rect x="1.9287%" y="485" width="0.2797%" height="15" fill="rgb(208,68,35)" fg:x="131" fg:w="19"/><text x="2.1787%" y="495.50"></text></g><g><title>[libc-2.31.so] (49 samples, 0.72%)</title><rect x="2.2085%" y="485" width="0.7214%" height="15" fill="rgb(232,128,0)" fg:x="150" fg:w="49"/><text x="2.4585%" y="495.50"></text></g><g><title>__libc_malloc (3 samples, 0.04%)</title><rect x="2.9299%" y="485" width="0.0442%" height="15" fill="rgb(207,160,47)" fg:x="199" fg:w="3"/><text x="3.1799%" y="495.50"></text></g><g><title>cfree (23 samples, 0.34%)</title><rect x="2.9741%" y="485" width="0.3386%" height="15" fill="rgb(228,23,34)" fg:x="202" fg:w="23"/><text x="3.2241%" y="495.50"></text></g><g><title>malachite_nz::natural::arithmetic::div_mod::&lt;impl malachite_base::num::arithmetic::traits::DivAssignMod&lt;&amp;malachite_nz::natural::Natural&gt; for malachite_nz::natural::Natural&gt;::div_assign_mod (98 samples, 1.44%)</title><rect x="3.3127%" y="485" width="1.4429%" height="15" fill="rgb(218,30,26)" fg:x="225" fg:w="98"/><text x="3.5627%" y="495.50"></text></g><g><title>malachite_nz::natural::arithmetic::div_mod::&lt;impl malachite_nz::natural::Natural&gt;::div_assign_mod_limb (170 samples, 2.50%)</title><rect x="4.7556%" y="485" width="2.5029%" height="15" fill="rgb(220,122,19)" fg:x="323" fg:w="170"/><text x="5.0056%" y="495.50">ma..</text></g><g><title>malachite_nz::natural::arithmetic::div_mod::limbs_div_limb_in_place_mod (16 samples, 0.24%)</title><rect x="7.2585%" y="485" width="0.2356%" height="15" fill="rgb(250,228,42)" fg:x="493" fg:w="16"/><text x="7.5085%" y="495.50"></text></g><g><title>malachite_nz::natural::arithmetic::mul::&lt;impl core::ops::arith::MulAssign&lt;&amp;malachite_nz::natural::Natural&gt; for malachite_nz::natural::Natural&gt;::mul_assign (1 samples, 0.01%)</title><rect x="7.4941%" y="485" width="0.0147%" height="15" fill="rgb(240,193,28)" fg:x="509" fg:w="1"/><text x="7.7441%" y="495.50"></text></g><g><title>[[stack]] (397 samples, 5.85%)</title><rect x="1.9287%" y="501" width="5.8451%" height="15" fill="rgb(216,20,37)" fg:x="131" fg:w="397"/><text x="2.1787%" y="511.50">[[stack..</text></g><g><title>malachite_nz::natural::conversion::from_limbs::&lt;impl malachite_nz::natural::Natural&gt;::from_owned_limbs_asc (18 samples, 0.27%)</title><rect x="7.5088%" y="485" width="0.2650%" height="15" fill="rgb(206,188,39)" fg:x="510" fg:w="18"/><text x="7.7588%" y="495.50"></text></g><g><title>[ld-2.31.so] (1 samples, 0.01%)</title><rect x="7.7739%" y="501" width="0.0147%" height="15" fill="rgb(217,207,13)" fg:x="528" fg:w="1"/><text x="8.0239%" y="511.50"></text></g><g><title>[ld-2.31.so] (1 samples, 0.01%)</title><rect x="7.7739%" y="485" width="0.0147%" height="15" fill="rgb(231,73,38)" fg:x="528" fg:w="1"/><text x="8.0239%" y="495.50"></text></g><g><title>[ld-2.31.so] (1 samples, 0.01%)</title><rect x="7.7739%" y="469" width="0.0147%" height="15" fill="rgb(225,20,46)" fg:x="528" fg:w="1"/><text x="8.0239%" y="479.50"></text></g><g><title>[ld-2.31.so] (1 samples, 0.01%)</title><rect x="7.7739%" y="453" width="0.0147%" height="15" fill="rgb(210,31,41)" fg:x="528" fg:w="1"/><text x="8.0239%" y="463.50"></text></g><g><title>[ld-2.31.so] (1 samples, 0.01%)</title><rect x="7.7739%" y="437" width="0.0147%" height="15" fill="rgb(221,200,47)" fg:x="528" fg:w="1"/><text x="8.0239%" y="447.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.01%)</title><rect x="7.7739%" y="421" width="0.0147%" height="15" fill="rgb(226,26,5)" fg:x="528" fg:w="1"/><text x="8.0239%" y="431.50"></text></g><g><title>[ld-2.31.so] (1 samples, 0.01%)</title><rect x="7.7739%" y="405" width="0.0147%" height="15" fill="rgb(249,33,26)" fg:x="528" fg:w="1"/><text x="8.0239%" y="415.50"></text></g><g><title>[ld-2.31.so] (1 samples, 0.01%)</title><rect x="7.7739%" y="389" width="0.0147%" height="15" fill="rgb(235,183,28)" fg:x="528" fg:w="1"/><text x="8.0239%" y="399.50"></text></g><g><title>[ld-2.31.so] (1 samples, 0.01%)</title><rect x="7.7739%" y="373" width="0.0147%" height="15" fill="rgb(221,5,38)" fg:x="528" fg:w="1"/><text x="8.0239%" y="383.50"></text></g><g><title>[ld-2.31.so] (1 samples, 0.01%)</title><rect x="7.7739%" y="357" width="0.0147%" height="15" fill="rgb(247,18,42)" fg:x="528" fg:w="1"/><text x="8.0239%" y="367.50"></text></g><g><title>[libc-2.31.so] (45 samples, 0.66%)</title><rect x="7.7886%" y="485" width="0.6625%" height="15" fill="rgb(241,131,45)" fg:x="529" fg:w="45"/><text x="8.0386%" y="495.50"></text></g><g><title>__libc_calloc (27 samples, 0.40%)</title><rect x="8.4511%" y="485" width="0.3975%" height="15" fill="rgb(249,31,29)" fg:x="574" fg:w="27"/><text x="8.7011%" y="495.50"></text></g><g><title>__rdl_alloc_zeroed (19 samples, 0.28%)</title><rect x="8.8486%" y="485" width="0.2797%" height="15" fill="rgb(225,111,53)" fg:x="601" fg:w="19"/><text x="9.0986%" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (19 samples, 0.28%)</title><rect x="8.8486%" y="469" width="0.2797%" height="15" fill="rgb(238,160,17)" fg:x="601" fg:w="19"/><text x="9.0986%" y="479.50"></text></g><g><title>malachite_nz::natural::arithmetic::div_mod::&lt;impl malachite_base::num::arithmetic::traits::DivAssignMod&lt;&amp;malachite_nz::natural::Natural&gt; for malachite_nz::natural::Natural&gt;::div_assign_mod (176 samples, 2.59%)</title><rect x="9.1284%" y="485" width="2.5913%" height="15" fill="rgb(214,148,48)" fg:x="620" fg:w="176"/><text x="9.3784%" y="495.50">ma..</text></g><g><title>malachite_nz::natural::arithmetic::mul::&lt;impl core::ops::arith::MulAssign&lt;&amp;malachite_nz::natural::Natural&gt; for malachite_nz::natural::Natural&gt;::mul_assign (1 samples, 0.01%)</title><rect x="11.7197%" y="485" width="0.0147%" height="15" fill="rgb(232,36,49)" fg:x="796" fg:w="1"/><text x="11.9697%" y="495.50"></text></g><g><title>malachite_nz::natural::comparison::partial_cmp_primitive_int::&lt;impl core::cmp::PartialOrd&lt;i32&gt; for malachite_nz::natural::Natural&gt;::partial_cmp (3 samples, 0.04%)</title><rect x="11.7344%" y="485" width="0.0442%" height="15" fill="rgb(209,103,24)" fg:x="797" fg:w="3"/><text x="11.9844%" y="495.50"></text></g><g><title>malachite_nz::natural::conversion::from_limbs::&lt;impl malachite_nz::natural::Natural&gt;::from_owned_limbs_asc (9 samples, 0.13%)</title><rect x="11.7786%" y="485" width="0.1325%" height="15" fill="rgb(229,88,8)" fg:x="800" fg:w="9"/><text x="12.0286%" y="495.50"></text></g><g><title>[nice-rust] (281 samples, 4.14%)</title><rect x="7.7886%" y="501" width="4.1372%" height="15" fill="rgb(213,181,19)" fg:x="529" fg:w="281"/><text x="8.0386%" y="511.50">[nice..</text></g><g><title>malachite_nz::natural::conversion::primitive_int_from_natural::&lt;impl core::convert::TryFrom&lt;&amp;malachite_nz::natural::Natural&gt; for u64&gt;::try_from (1 samples, 0.01%)</title><rect x="11.9111%" y="485" width="0.0147%" height="15" fill="rgb(254,191,54)" fg:x="809" fg:w="1"/><text x="12.1611%" y="495.50"></text></g><g><title>[libc-2.31.so] (3 samples, 0.04%)</title><rect x="11.9258%" y="485" width="0.0442%" height="15" fill="rgb(241,83,37)" fg:x="810" fg:w="3"/><text x="12.1758%" y="495.50"></text></g><g><title>__libc_calloc (37 samples, 0.54%)</title><rect x="11.9700%" y="485" width="0.5448%" height="15" fill="rgb(233,36,39)" fg:x="813" fg:w="37"/><text x="12.2200%" y="495.50"></text></g><g><title>cfree (1 samples, 0.01%)</title><rect x="12.5147%" y="485" width="0.0147%" height="15" fill="rgb(226,3,54)" fg:x="850" fg:w="1"/><text x="12.7647%" y="495.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (473 samples, 6.96%)</title><rect x="12.5294%" y="485" width="6.9641%" height="15" fill="rgb(245,192,40)" fg:x="851" fg:w="473"/><text x="12.7794%" y="495.50">core::ops..</text></g><g><title>malachite_nz::natural::arithmetic::div_mod::&lt;impl malachite_base::num::arithmetic::traits::DivAssignMod&lt;&amp;malachite_nz::natural::Natural&gt; for malachite_nz::natural::Natural&gt;::div_assign_mod (6 samples, 0.09%)</title><rect x="19.4935%" y="485" width="0.0883%" height="15" fill="rgb(238,167,29)" fg:x="1324" fg:w="6"/><text x="19.7435%" y="495.50"></text></g><g><title>malachite_nz::natural::arithmetic::div_mod::&lt;impl malachite_nz::natural::Natural&gt;::div_assign_mod_limb (246 samples, 3.62%)</title><rect x="19.5819%" y="485" width="3.6219%" height="15" fill="rgb(232,182,51)" fg:x="1330" fg:w="246"/><text x="19.8319%" y="495.50">mala..</text></g><g><title>malachite_nz::natural::arithmetic::div_mod::limbs_div_limb_in_place_mod (4 samples, 0.06%)</title><rect x="23.2038%" y="485" width="0.0589%" height="15" fill="rgb(231,60,39)" fg:x="1576" fg:w="4"/><text x="23.4538%" y="495.50"></text></g><g><title>[unknown] (776 samples, 11.43%)</title><rect x="11.9258%" y="501" width="11.4252%" height="15" fill="rgb(208,69,12)" fg:x="810" fg:w="776"/><text x="12.1758%" y="511.50">[unknown]</text></g><g><title>malachite_nz::natural::arithmetic::mul::limb::&lt;impl malachite_nz::natural::Natural&gt;::mul_limb_ref (6 samples, 0.09%)</title><rect x="23.2627%" y="485" width="0.0883%" height="15" fill="rgb(235,93,37)" fg:x="1580" fg:w="6"/><text x="23.5127%" y="495.50"></text></g><g><title>__udivti3 (50 samples, 0.74%)</title><rect x="23.3510%" y="501" width="0.7362%" height="15" fill="rgb(213,116,39)" fg:x="1586" fg:w="50"/><text x="23.6010%" y="511.50"></text></g><g><title>compiler_builtins::int::udiv::__udivti3 (47 samples, 0.69%)</title><rect x="23.3952%" y="485" width="0.6920%" height="15" fill="rgb(222,207,29)" fg:x="1589" fg:w="47"/><text x="23.6452%" y="495.50"></text></g><g><title>compiler_builtins::int::specialized_div_rem::u128_div_rem (47 samples, 0.69%)</title><rect x="23.3952%" y="469" width="0.6920%" height="15" fill="rgb(206,96,30)" fg:x="1589" fg:w="47"/><text x="23.6452%" y="479.50"></text></g><g><title>compiler_builtins::int::specialized_div_rem::u128_by_u64_div_rem (47 samples, 0.69%)</title><rect x="23.3952%" y="453" width="0.6920%" height="15" fill="rgb(218,138,4)" fg:x="1589" fg:w="47"/><text x="23.6452%" y="463.50"></text></g><g><title>[libc-2.31.so] (21 samples, 0.31%)</title><rect x="40.8863%" y="229" width="0.3092%" height="15" fill="rgb(250,191,14)" fg:x="2777" fg:w="21"/><text x="41.1363%" y="239.50"></text></g><g><title>[nice-rust] (1 samples, 0.01%)</title><rect x="41.1955%" y="229" width="0.0147%" height="15" fill="rgb(239,60,40)" fg:x="2798" fg:w="1"/><text x="41.4455%" y="239.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.01%)</title><rect x="41.1955%" y="213" width="0.0147%" height="15" fill="rgb(206,27,48)" fg:x="2798" fg:w="1"/><text x="41.4455%" y="223.50"></text></g><g><title>__libc_calloc (434 samples, 6.39%)</title><rect x="41.2102%" y="229" width="6.3899%" height="15" fill="rgb(225,35,8)" fg:x="2799" fg:w="434"/><text x="41.4602%" y="239.50">__libc_c..</text></g><g><title>[libc-2.31.so] (173 samples, 2.55%)</title><rect x="45.0530%" y="213" width="2.5471%" height="15" fill="rgb(250,213,24)" fg:x="3060" fg:w="173"/><text x="45.3030%" y="223.50">[l..</text></g><g><title>__rdl_alloc_zeroed (89 samples, 1.31%)</title><rect x="47.6001%" y="229" width="1.3104%" height="15" fill="rgb(247,123,22)" fg:x="3233" fg:w="89"/><text x="47.8501%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (61 samples, 0.90%)</title><rect x="48.0124%" y="213" width="0.8981%" height="15" fill="rgb(231,138,38)" fg:x="3261" fg:w="61"/><text x="48.2624%" y="223.50"></text></g><g><title>__rust_alloc_zeroed (14 samples, 0.21%)</title><rect x="48.9105%" y="229" width="0.2061%" height="15" fill="rgb(231,145,46)" fg:x="3322" fg:w="14"/><text x="49.1605%" y="239.50"></text></g><g><title>__rust_dealloc (1 samples, 0.01%)</title><rect x="49.1166%" y="229" width="0.0147%" height="15" fill="rgb(251,118,11)" fg:x="3336" fg:w="1"/><text x="49.3666%" y="239.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="49.1313%" y="229" width="0.0147%" height="15" fill="rgb(217,147,25)" fg:x="3337" fg:w="1"/><text x="49.3813%" y="239.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="49.1313%" y="213" width="0.0147%" height="15" fill="rgb(247,81,37)" fg:x="3337" fg:w="1"/><text x="49.3813%" y="223.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="49.1313%" y="197" width="0.0147%" height="15" fill="rgb(209,12,38)" fg:x="3337" fg:w="1"/><text x="49.3813%" y="207.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.01%)</title><rect x="49.1313%" y="181" width="0.0147%" height="15" fill="rgb(227,1,9)" fg:x="3337" fg:w="1"/><text x="49.3813%" y="191.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.01%)</title><rect x="49.1313%" y="165" width="0.0147%" height="15" fill="rgb(248,47,43)" fg:x="3337" fg:w="1"/><text x="49.3813%" y="175.50"></text></g><g><title>tick_sched_timer (1 samples, 0.01%)</title><rect x="49.1313%" y="149" width="0.0147%" height="15" fill="rgb(221,10,30)" fg:x="3337" fg:w="1"/><text x="49.3813%" y="159.50"></text></g><g><title>tick_do_update_jiffies64.part.0 (1 samples, 0.01%)</title><rect x="49.1313%" y="133" width="0.0147%" height="15" fill="rgb(210,229,1)" fg:x="3337" fg:w="1"/><text x="49.3813%" y="143.50"></text></g><g><title>cfree (5 samples, 0.07%)</title><rect x="49.1461%" y="229" width="0.0736%" height="15" fill="rgb(222,148,37)" fg:x="3338" fg:w="5"/><text x="49.3961%" y="239.50"></text></g><g><title>[libc-2.31.so] (4 samples, 0.06%)</title><rect x="73.6602%" y="197" width="0.0589%" height="15" fill="rgb(234,67,33)" fg:x="5003" fg:w="4"/><text x="73.9102%" y="207.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="73.7191%" y="197" width="0.0147%" height="15" fill="rgb(247,98,35)" fg:x="5007" fg:w="1"/><text x="73.9691%" y="207.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="73.7191%" y="181" width="0.0147%" height="15" fill="rgb(247,138,52)" fg:x="5007" fg:w="1"/><text x="73.9691%" y="191.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="73.7191%" y="165" width="0.0147%" height="15" fill="rgb(213,79,30)" fg:x="5007" fg:w="1"/><text x="73.9691%" y="175.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.01%)</title><rect x="73.7191%" y="149" width="0.0147%" height="15" fill="rgb(246,177,23)" fg:x="5007" fg:w="1"/><text x="73.9691%" y="159.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.01%)</title><rect x="73.7191%" y="133" width="0.0147%" height="15" fill="rgb(230,62,27)" fg:x="5007" fg:w="1"/><text x="73.9691%" y="143.50"></text></g><g><title>tick_sched_timer (1 samples, 0.01%)</title><rect x="73.7191%" y="117" width="0.0147%" height="15" fill="rgb(216,154,8)" fg:x="5007" fg:w="1"/><text x="73.9691%" y="127.50"></text></g><g><title>tick_sched_handle (1 samples, 0.01%)</title><rect x="73.7191%" y="101" width="0.0147%" height="15" fill="rgb(244,35,45)" fg:x="5007" fg:w="1"/><text x="73.9691%" y="111.50"></text></g><g><title>update_process_times (1 samples, 0.01%)</title><rect x="73.7191%" y="85" width="0.0147%" height="15" fill="rgb(251,115,12)" fg:x="5007" fg:w="1"/><text x="73.9691%" y="95.50"></text></g><g><title>scheduler_tick (1 samples, 0.01%)</title><rect x="73.7191%" y="69" width="0.0147%" height="15" fill="rgb(240,54,50)" fg:x="5007" fg:w="1"/><text x="73.9691%" y="79.50"></text></g><g><title>arch_scale_freq_tick (1 samples, 0.01%)</title><rect x="73.7191%" y="53" width="0.0147%" height="15" fill="rgb(233,84,52)" fg:x="5007" fg:w="1"/><text x="73.9691%" y="63.50"></text></g><g><title>native_read_msr (1 samples, 0.01%)</title><rect x="73.7191%" y="37" width="0.0147%" height="15" fill="rgb(207,117,47)" fg:x="5007" fg:w="1"/><text x="73.9691%" y="47.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.07%)</title><rect x="73.7338%" y="197" width="0.0736%" height="15" fill="rgb(249,43,39)" fg:x="5008" fg:w="5"/><text x="73.9838%" y="207.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.07%)</title><rect x="73.7338%" y="181" width="0.0736%" height="15" fill="rgb(209,38,44)" fg:x="5008" fg:w="5"/><text x="73.9838%" y="191.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.07%)</title><rect x="73.7338%" y="165" width="0.0736%" height="15" fill="rgb(236,212,23)" fg:x="5008" fg:w="5"/><text x="73.9838%" y="175.50"></text></g><g><title>schedule (5 samples, 0.07%)</title><rect x="73.7338%" y="149" width="0.0736%" height="15" fill="rgb(242,79,21)" fg:x="5008" fg:w="5"/><text x="73.9838%" y="159.50"></text></g><g><title>__schedule (5 samples, 0.07%)</title><rect x="73.7338%" y="133" width="0.0736%" height="15" fill="rgb(211,96,35)" fg:x="5008" fg:w="5"/><text x="73.9838%" y="143.50"></text></g><g><title>finish_task_switch (5 samples, 0.07%)</title><rect x="73.7338%" y="117" width="0.0736%" height="15" fill="rgb(253,215,40)" fg:x="5008" fg:w="5"/><text x="73.9838%" y="127.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.07%)</title><rect x="73.7338%" y="101" width="0.0736%" height="15" fill="rgb(211,81,21)" fg:x="5008" fg:w="5"/><text x="73.9838%" y="111.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 0.07%)</title><rect x="73.7338%" y="85" width="0.0736%" height="15" fill="rgb(208,190,38)" fg:x="5008" fg:w="5"/><text x="73.9838%" y="95.50"></text></g><g><title>native_write_msr (5 samples, 0.07%)</title><rect x="73.7338%" y="69" width="0.0736%" height="15" fill="rgb(235,213,38)" fg:x="5008" fg:w="5"/><text x="73.9838%" y="79.50"></text></g><g><title>cfree (3 samples, 0.04%)</title><rect x="73.8074%" y="197" width="0.0442%" height="15" fill="rgb(237,122,38)" fg:x="5013" fg:w="3"/><text x="74.0574%" y="207.50"></text></g><g><title>malachite_nz::natural::arithmetic::div_mod::&lt;impl malachite_base::num::arithmetic::traits::DivAssignMod&lt;&amp;malachite_nz::natural::Natural&gt; for malachite_nz::natural::Natural&gt;::div_assign_mod (1,823 samples, 26.84%)</title><rect x="49.2197%" y="229" width="26.8404%" height="15" fill="rgb(244,218,35)" fg:x="3343" fg:w="1823"/><text x="49.4697%" y="239.50">malachite_nz::natural::arithmetic::div_mod:..</text></g><g><title>malachite_nz::natural::arithmetic::div_mod::&lt;impl malachite_nz::natural::Natural&gt;::div_assign_mod_limb (862 samples, 12.69%)</title><rect x="63.3687%" y="213" width="12.6914%" height="15" fill="rgb(240,68,47)" fg:x="4304" fg:w="862"/><text x="63.6187%" y="223.50">malachite_nz::natur..</text></g><g><title>malachite_nz::natural::arithmetic::div_mod::limbs_div_limb_in_place_mod (150 samples, 2.21%)</title><rect x="73.8516%" y="197" width="2.2085%" height="15" fill="rgb(210,16,53)" fg:x="5016" fg:w="150"/><text x="74.1016%" y="207.50">m..</text></g><g><title>__libc_malloc (6 samples, 0.09%)</title><rect x="76.4134%" y="197" width="0.0883%" height="15" fill="rgb(235,124,12)" fg:x="5190" fg:w="6"/><text x="76.6634%" y="207.50"></text></g><g><title>__rdl_alloc (3 samples, 0.04%)</title><rect x="76.5018%" y="197" width="0.0442%" height="15" fill="rgb(224,169,11)" fg:x="5196" fg:w="3"/><text x="76.7518%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.03%)</title><rect x="76.5165%" y="181" width="0.0294%" height="15" fill="rgb(250,166,2)" fg:x="5197" fg:w="2"/><text x="76.7665%" y="191.50"></text></g><g><title>malachite_nz::natural::arithmetic::mul::&lt;impl core::ops::arith::MulAssign&lt;&amp;malachite_nz::natural::Natural&gt; for malachite_nz::natural::Natural&gt;::mul_assign (35 samples, 0.52%)</title><rect x="76.0601%" y="229" width="0.5153%" height="15" fill="rgb(242,216,29)" fg:x="5166" fg:w="35"/><text x="76.3101%" y="239.50"></text></g><g><title>malachite_nz::natural::arithmetic::mul::limb::&lt;impl malachite_nz::natural::Natural&gt;::mul_limb_ref (31 samples, 0.46%)</title><rect x="76.1190%" y="213" width="0.4564%" height="15" fill="rgb(230,116,27)" fg:x="5170" fg:w="31"/><text x="76.3690%" y="223.50"></text></g><g><title>__rust_alloc (2 samples, 0.03%)</title><rect x="76.5459%" y="197" width="0.0294%" height="15" fill="rgb(228,99,48)" fg:x="5199" fg:w="2"/><text x="76.7959%" y="207.50"></text></g><g><title>malachite_nz::natural::comparison::partial_cmp_primitive_int::&lt;impl core::cmp::PartialOrd&lt;i32&gt; for malachite_nz::natural::Natural&gt;::partial_cmp (626 samples, 9.22%)</title><rect x="76.5754%" y="229" width="9.2167%" height="15" fill="rgb(253,11,6)" fg:x="5201" fg:w="626"/><text x="76.8254%" y="239.50">malachite_nz:..</text></g><g><title>[libc-2.31.so] (274 samples, 4.03%)</title><rect x="87.9122%" y="213" width="4.0342%" height="15" fill="rgb(247,143,39)" fg:x="5971" fg:w="274"/><text x="88.1622%" y="223.50">[lib..</text></g><g><title>__rdl_dealloc (3 samples, 0.04%)</title><rect x="91.9464%" y="213" width="0.0442%" height="15" fill="rgb(236,97,10)" fg:x="6245" fg:w="3"/><text x="92.1964%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.04%)</title><rect x="91.9464%" y="197" width="0.0442%" height="15" fill="rgb(233,208,19)" fg:x="6245" fg:w="3"/><text x="92.1964%" y="207.50"></text></g><g><title>__rust_dealloc (4 samples, 0.06%)</title><rect x="91.9906%" y="213" width="0.0589%" height="15" fill="rgb(216,164,2)" fg:x="6248" fg:w="4"/><text x="92.2406%" y="223.50"></text></g><g><title>malachite_nz::natural::conversion::from_limbs::&lt;impl malachite_nz::natural::Natural&gt;::from_owned_limbs_asc (494 samples, 7.27%)</title><rect x="85.7921%" y="229" width="7.2733%" height="15" fill="rgb(220,129,5)" fg:x="5827" fg:w="494"/><text x="86.0421%" y="239.50">malachite_..</text></g><g><title>cfree (69 samples, 1.02%)</title><rect x="92.0495%" y="213" width="1.0159%" height="15" fill="rgb(242,17,10)" fg:x="6252" fg:w="69"/><text x="92.2995%" y="223.50"></text></g><g><title>std::panic::catch_unwind (4,726 samples, 69.58%)</title><rect x="24.0872%" y="373" width="69.5819%" height="15" fill="rgb(242,107,0)" fg:x="1636" fg:w="4726"/><text x="24.3372%" y="383.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (4,726 samples, 69.58%)</title><rect x="24.0872%" y="357" width="69.5819%" height="15" fill="rgb(251,28,31)" fg:x="1636" fg:w="4726"/><text x="24.3372%" y="367.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (4,726 samples, 69.58%)</title><rect x="24.0872%" y="341" width="69.5819%" height="15" fill="rgb(233,223,10)" fg:x="1636" fg:w="4726"/><text x="24.3372%" y="351.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (4,726 samples, 69.58%)</title><rect x="24.0872%" y="325" width="69.5819%" height="15" fill="rgb(215,21,27)" fg:x="1636" fg:w="4726"/><text x="24.3372%" y="335.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (4,726 samples, 69.58%)</title><rect x="24.0872%" y="309" width="69.5819%" height="15" fill="rgb(232,23,21)" fg:x="1636" fg:w="4726"/><text x="24.3372%" y="319.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (4,726 samples, 69.58%)</title><rect x="24.0872%" y="293" width="69.5819%" height="15" fill="rgb(244,5,23)" fg:x="1636" fg:w="4726"/><text x="24.3372%" y="303.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>nice_rust::main (4,726 samples, 69.58%)</title><rect x="24.0872%" y="277" width="69.5819%" height="15" fill="rgb(226,81,46)" fg:x="1636" fg:w="4726"/><text x="24.3372%" y="287.50">nice_rust::main</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4,726 samples, 69.58%)</title><rect x="24.0872%" y="261" width="69.5819%" height="15" fill="rgb(247,70,30)" fg:x="1636" fg:w="4726"/><text x="24.3372%" y="271.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (4,573 samples, 67.33%)</title><rect x="26.3398%" y="245" width="67.3292%" height="15" fill="rgb(212,68,19)" fg:x="1789" fg:w="4573"/><text x="26.5898%" y="255.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>malachite_nz::natural::conversion::primitive_int_from_natural::&lt;impl core::convert::TryFrom&lt;&amp;malachite_nz::natural::Natural&gt; for u64&gt;::try_from (41 samples, 0.60%)</title><rect x="93.0654%" y="229" width="0.6037%" height="15" fill="rgb(240,187,13)" fg:x="6321" fg:w="41"/><text x="93.3154%" y="239.50"></text></g><g><title>_start (4,727 samples, 69.60%)</title><rect x="24.0872%" y="501" width="69.5966%" height="15" fill="rgb(223,113,26)" fg:x="1636" fg:w="4727"/><text x="24.3372%" y="511.50">_start</text></g><g><title>__libc_start_main (4,727 samples, 69.60%)</title><rect x="24.0872%" y="485" width="69.5966%" height="15" fill="rgb(206,192,2)" fg:x="1636" fg:w="4727"/><text x="24.3372%" y="495.50">__libc_start_main</text></g><g><title>main (4,727 samples, 69.60%)</title><rect x="24.0872%" y="469" width="69.5966%" height="15" fill="rgb(241,108,4)" fg:x="1636" fg:w="4727"/><text x="24.3372%" y="479.50">main</text></g><g><title>std::rt::lang_start_internal (4,727 samples, 69.60%)</title><rect x="24.0872%" y="453" width="69.5966%" height="15" fill="rgb(247,173,49)" fg:x="1636" fg:w="4727"/><text x="24.3372%" y="463.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (4,727 samples, 69.60%)</title><rect x="24.0872%" y="437" width="69.5966%" height="15" fill="rgb(224,114,35)" fg:x="1636" fg:w="4727"/><text x="24.3372%" y="447.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (4,727 samples, 69.60%)</title><rect x="24.0872%" y="421" width="69.5966%" height="15" fill="rgb(245,159,27)" fg:x="1636" fg:w="4727"/><text x="24.3372%" y="431.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (4,727 samples, 69.60%)</title><rect x="24.0872%" y="405" width="69.5966%" height="15" fill="rgb(245,172,44)" fg:x="1636" fg:w="4727"/><text x="24.3372%" y="415.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (4,727 samples, 69.60%)</title><rect x="24.0872%" y="389" width="69.5966%" height="15" fill="rgb(236,23,11)" fg:x="1636" fg:w="4727"/><text x="24.3372%" y="399.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::rt::init (1 samples, 0.01%)</title><rect x="93.6690%" y="373" width="0.0147%" height="15" fill="rgb(205,117,38)" fg:x="6362" fg:w="1"/><text x="93.9190%" y="383.50"></text></g><g><title>std::sys::unix::thread::guard::init (1 samples, 0.01%)</title><rect x="93.6690%" y="357" width="0.0147%" height="15" fill="rgb(237,72,25)" fg:x="6362" fg:w="1"/><text x="93.9190%" y="367.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start_aligned (1 samples, 0.01%)</title><rect x="93.6690%" y="341" width="0.0147%" height="15" fill="rgb(244,70,9)" fg:x="6362" fg:w="1"/><text x="93.9190%" y="351.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start (1 samples, 0.01%)</title><rect x="93.6690%" y="325" width="0.0147%" height="15" fill="rgb(217,125,39)" fg:x="6362" fg:w="1"/><text x="93.9190%" y="335.50"></text></g><g><title>pthread_getattr_np (1 samples, 0.01%)</title><rect x="93.6690%" y="309" width="0.0147%" height="15" fill="rgb(235,36,10)" fg:x="6362" fg:w="1"/><text x="93.9190%" y="319.50"></text></g><g><title>[ld-2.31.so] (1 samples, 0.01%)</title><rect x="93.6690%" y="293" width="0.0147%" height="15" fill="rgb(251,123,47)" fg:x="6362" fg:w="1"/><text x="93.9190%" y="303.50"></text></g><g><title>[ld-2.31.so] (1 samples, 0.01%)</title><rect x="93.6690%" y="277" width="0.0147%" height="15" fill="rgb(221,13,13)" fg:x="6362" fg:w="1"/><text x="93.9190%" y="287.50"></text></g><g><title>[ld-2.31.so] (1 samples, 0.01%)</title><rect x="93.6690%" y="261" width="0.0147%" height="15" fill="rgb(238,131,9)" fg:x="6362" fg:w="1"/><text x="93.9190%" y="271.50"></text></g><g><title>[ld-2.31.so] (1 samples, 0.01%)</title><rect x="93.6690%" y="245" width="0.0147%" height="15" fill="rgb(211,50,8)" fg:x="6362" fg:w="1"/><text x="93.9190%" y="255.50"></text></g><g><title>begin_new_exec (1 samples, 0.01%)</title><rect x="93.6837%" y="405" width="0.0147%" height="15" fill="rgb(245,182,24)" fg:x="6363" fg:w="1"/><text x="93.9337%" y="415.50"></text></g><g><title>security_bprm_committed_creds (1 samples, 0.01%)</title><rect x="93.6837%" y="389" width="0.0147%" height="15" fill="rgb(242,14,37)" fg:x="6363" fg:w="1"/><text x="93.9337%" y="399.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.03%)</title><rect x="93.6837%" y="501" width="0.0294%" height="15" fill="rgb(246,228,12)" fg:x="6363" fg:w="2"/><text x="93.9337%" y="511.50"></text></g><g><title>do_syscall_64 (2 samples, 0.03%)</title><rect x="93.6837%" y="485" width="0.0294%" height="15" fill="rgb(213,55,15)" fg:x="6363" fg:w="2"/><text x="93.9337%" y="495.50"></text></g><g><title>__x64_sys_execve (2 samples, 0.03%)</title><rect x="93.6837%" y="469" width="0.0294%" height="15" fill="rgb(209,9,3)" fg:x="6363" fg:w="2"/><text x="93.9337%" y="479.50"></text></g><g><title>do_execveat_common (2 samples, 0.03%)</title><rect x="93.6837%" y="453" width="0.0294%" height="15" fill="rgb(230,59,30)" fg:x="6363" fg:w="2"/><text x="93.9337%" y="463.50"></text></g><g><title>bprm_execve (2 samples, 0.03%)</title><rect x="93.6837%" y="437" width="0.0294%" height="15" fill="rgb(209,121,21)" fg:x="6363" fg:w="2"/><text x="93.9337%" y="447.50"></text></g><g><title>load_elf_binary (2 samples, 0.03%)</title><rect x="93.6837%" y="421" width="0.0294%" height="15" fill="rgb(220,109,13)" fg:x="6363" fg:w="2"/><text x="93.9337%" y="431.50"></text></g><g><title>elf_map (1 samples, 0.01%)</title><rect x="93.6985%" y="405" width="0.0147%" height="15" fill="rgb(232,18,1)" fg:x="6364" fg:w="1"/><text x="93.9485%" y="415.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 0.01%)</title><rect x="93.6985%" y="389" width="0.0147%" height="15" fill="rgb(215,41,42)" fg:x="6364" fg:w="1"/><text x="93.9485%" y="399.50"></text></g><g><title>do_mmap (1 samples, 0.01%)</title><rect x="93.6985%" y="373" width="0.0147%" height="15" fill="rgb(224,123,36)" fg:x="6364" fg:w="1"/><text x="93.9485%" y="383.50"></text></g><g><title>mmap_region (1 samples, 0.01%)</title><rect x="93.6985%" y="357" width="0.0147%" height="15" fill="rgb(240,125,3)" fg:x="6364" fg:w="1"/><text x="93.9485%" y="367.50"></text></g><g><title>vma_link (1 samples, 0.01%)</title><rect x="93.6985%" y="341" width="0.0147%" height="15" fill="rgb(205,98,50)" fg:x="6364" fg:w="1"/><text x="93.9485%" y="351.50"></text></g><g><title>vma_interval_tree_insert (1 samples, 0.01%)</title><rect x="93.6985%" y="325" width="0.0147%" height="15" fill="rgb(205,185,37)" fg:x="6364" fg:w="1"/><text x="93.9485%" y="335.50"></text></g><g><title>nice-rust (6,786 samples, 99.91%)</title><rect x="0.0000%" y="517" width="99.9117%" height="15" fill="rgb(238,207,15)" fg:x="0" fg:w="6786"/><text x="0.2500%" y="527.50">nice-rust</text></g><g><title>malachite_nz::natural::arithmetic::div_mod::&lt;impl malachite_base::num::arithmetic::traits::DivAssignMod&lt;&amp;malachite_nz::natural::Natural&gt; for malachite_nz::natural::Natural&gt;::div_assign_mod (421 samples, 6.20%)</title><rect x="93.7132%" y="501" width="6.1985%" height="15" fill="rgb(213,199,42)" fg:x="6365" fg:w="421"/><text x="93.9632%" y="511.50">malachit..</text></g><g><title>all (6,792 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(235,201,11)" fg:x="0" fg:w="6792"/><text x="0.2500%" y="543.50"></text></g><g><title>perf_5.10 (6 samples, 0.09%)</title><rect x="99.9117%" y="517" width="0.0883%" height="15" fill="rgb(207,46,11)" fg:x="6786" fg:w="6"/><text x="100.1617%" y="527.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 0.09%)</title><rect x="99.9117%" y="501" width="0.0883%" height="15" fill="rgb(241,35,35)" fg:x="6786" fg:w="6"/><text x="100.1617%" y="511.50"></text></g><g><title>do_syscall_64 (6 samples, 0.09%)</title><rect x="99.9117%" y="485" width="0.0883%" height="15" fill="rgb(243,32,47)" fg:x="6786" fg:w="6"/><text x="100.1617%" y="495.50"></text></g><g><title>__x64_sys_execve (6 samples, 0.09%)</title><rect x="99.9117%" y="469" width="0.0883%" height="15" fill="rgb(247,202,23)" fg:x="6786" fg:w="6"/><text x="100.1617%" y="479.50"></text></g><g><title>do_execveat_common (6 samples, 0.09%)</title><rect x="99.9117%" y="453" width="0.0883%" height="15" fill="rgb(219,102,11)" fg:x="6786" fg:w="6"/><text x="100.1617%" y="463.50"></text></g><g><title>bprm_execve (6 samples, 0.09%)</title><rect x="99.9117%" y="437" width="0.0883%" height="15" fill="rgb(243,110,44)" fg:x="6786" fg:w="6"/><text x="100.1617%" y="447.50"></text></g><g><title>load_elf_binary (6 samples, 0.09%)</title><rect x="99.9117%" y="421" width="0.0883%" height="15" fill="rgb(222,74,54)" fg:x="6786" fg:w="6"/><text x="100.1617%" y="431.50"></text></g><g><title>begin_new_exec (6 samples, 0.09%)</title><rect x="99.9117%" y="405" width="0.0883%" height="15" fill="rgb(216,99,12)" fg:x="6786" fg:w="6"/><text x="100.1617%" y="415.50"></text></g><g><title>perf_event_exec (6 samples, 0.09%)</title><rect x="99.9117%" y="389" width="0.0883%" height="15" fill="rgb(226,22,26)" fg:x="6786" fg:w="6"/><text x="100.1617%" y="399.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (6 samples, 0.09%)</title><rect x="99.9117%" y="373" width="0.0883%" height="15" fill="rgb(217,163,10)" fg:x="6786" fg:w="6"/><text x="100.1617%" y="383.50"></text></g><g><title>native_write_msr (6 samples, 0.09%)</title><rect x="99.9117%" y="357" width="0.0883%" height="15" fill="rgb(213,25,53)" fg:x="6786" fg:w="6"/><text x="100.1617%" y="367.50"></text></g></svg></svg>