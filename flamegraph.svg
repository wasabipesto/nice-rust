<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="517.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="517.00"> </text><svg id="frames" x="10" width="1180" total_samples="21689"><g><title>[libc-2.31.so] (65 samples, 0.30%)</title><rect x="0.0000%" y="437" width="0.2997%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="65"/><text x="0.2500%" y="447.50"></text></g><g><title>__rust_probestack (10 samples, 0.05%)</title><rect x="0.2997%" y="437" width="0.0461%" height="15" fill="rgb(217,0,24)" fg:x="65" fg:w="10"/><text x="0.5497%" y="447.50"></text></g><g><title>cfree (60 samples, 0.28%)</title><rect x="0.3458%" y="437" width="0.2766%" height="15" fill="rgb(221,193,54)" fg:x="75" fg:w="60"/><text x="0.5958%" y="447.50"></text></g><g><title>malachite_nz::natural::arithmetic::mul::&lt;impl core::ops::arith::MulAssign for malachite_nz::natural::Natural&gt;::mul_assign (7 samples, 0.03%)</title><rect x="0.6224%" y="437" width="0.0323%" height="15" fill="rgb(248,212,6)" fg:x="135" fg:w="7"/><text x="0.8724%" y="447.50"></text></g><g><title>[[heap]] (298 samples, 1.37%)</title><rect x="0.0000%" y="453" width="1.3740%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="298"/><text x="0.2500%" y="463.50"></text></g><g><title>malachite_nz::natural::conversion::digits::general_digits::limbs_to_digits_small_base_basecase (156 samples, 0.72%)</title><rect x="0.6547%" y="437" width="0.7193%" height="15" fill="rgb(232,128,0)" fg:x="142" fg:w="156"/><text x="0.9047%" y="447.50"></text></g><g><title>[libc-2.31.so] (149 samples, 0.69%)</title><rect x="1.3740%" y="437" width="0.6870%" height="15" fill="rgb(207,160,47)" fg:x="298" fg:w="149"/><text x="1.6240%" y="447.50"></text></g><g><title>__libc_malloc (12 samples, 0.06%)</title><rect x="2.0610%" y="437" width="0.0553%" height="15" fill="rgb(228,23,34)" fg:x="447" fg:w="12"/><text x="2.3110%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (101 samples, 0.47%)</title><rect x="2.1163%" y="437" width="0.4657%" height="15" fill="rgb(218,30,26)" fg:x="459" fg:w="101"/><text x="2.3663%" y="447.50"></text></g><g><title>malachite_nz::natural::arithmetic::mul::&lt;impl core::ops::arith::MulAssign for malachite_nz::natural::Natural&gt;::mul_assign (16 samples, 0.07%)</title><rect x="2.5820%" y="437" width="0.0738%" height="15" fill="rgb(220,122,19)" fg:x="560" fg:w="16"/><text x="2.8320%" y="447.50"></text></g><g><title>malachite_nz::natural::arithmetic::mul::limb::&lt;impl malachite_nz::natural::Natural&gt;::mul_assign_limb (53 samples, 0.24%)</title><rect x="2.6557%" y="437" width="0.2444%" height="15" fill="rgb(250,228,42)" fg:x="576" fg:w="53"/><text x="2.9057%" y="447.50"></text></g><g><title>[[stack]] (362 samples, 1.67%)</title><rect x="1.3740%" y="453" width="1.6690%" height="15" fill="rgb(240,193,28)" fg:x="298" fg:w="362"/><text x="1.6240%" y="463.50"></text></g><g><title>malachite_nz::natural::conversion::digits::general_digits::get_chars_per_limb (31 samples, 0.14%)</title><rect x="2.9001%" y="437" width="0.1429%" height="15" fill="rgb(216,20,37)" fg:x="629" fg:w="31"/><text x="3.1501%" y="447.50"></text></g><g><title>[libc-2.31.so] (24 samples, 0.11%)</title><rect x="3.0430%" y="453" width="0.1107%" height="15" fill="rgb(206,188,39)" fg:x="660" fg:w="24"/><text x="3.2930%" y="463.50"></text></g><g><title>[libc-2.31.so] (513 samples, 2.37%)</title><rect x="3.1583%" y="437" width="2.3653%" height="15" fill="rgb(217,207,13)" fg:x="685" fg:w="513"/><text x="3.4083%" y="447.50">[l..</text></g><g><title>__libc_calloc (195 samples, 0.90%)</title><rect x="5.5235%" y="437" width="0.8991%" height="15" fill="rgb(231,73,38)" fg:x="1198" fg:w="195"/><text x="5.7735%" y="447.50"></text></g><g><title>__libc_malloc (67 samples, 0.31%)</title><rect x="6.4226%" y="437" width="0.3089%" height="15" fill="rgb(225,20,46)" fg:x="1393" fg:w="67"/><text x="6.6726%" y="447.50"></text></g><g><title>__rdl_alloc (5 samples, 0.02%)</title><rect x="6.7315%" y="437" width="0.0231%" height="15" fill="rgb(210,31,41)" fg:x="1460" fg:w="5"/><text x="6.9815%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (5 samples, 0.02%)</title><rect x="6.7315%" y="421" width="0.0231%" height="15" fill="rgb(221,200,47)" fg:x="1460" fg:w="5"/><text x="6.9815%" y="431.50"></text></g><g><title>__rdl_alloc_zeroed (31 samples, 0.14%)</title><rect x="6.7546%" y="437" width="0.1429%" height="15" fill="rgb(226,26,5)" fg:x="1465" fg:w="31"/><text x="7.0046%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (27 samples, 0.12%)</title><rect x="6.7730%" y="421" width="0.1245%" height="15" fill="rgb(249,33,26)" fg:x="1469" fg:w="27"/><text x="7.0230%" y="431.50"></text></g><g><title>__rdl_realloc (108 samples, 0.50%)</title><rect x="6.8975%" y="437" width="0.4979%" height="15" fill="rgb(235,183,28)" fg:x="1496" fg:w="108"/><text x="7.1475%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (35 samples, 0.16%)</title><rect x="7.2341%" y="421" width="0.1614%" height="15" fill="rgb(221,5,38)" fg:x="1569" fg:w="35"/><text x="7.4841%" y="431.50"></text></g><g><title>__rust_probestack (18 samples, 0.08%)</title><rect x="7.3955%" y="437" width="0.0830%" height="15" fill="rgb(247,18,42)" fg:x="1604" fg:w="18"/><text x="7.6455%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (77 samples, 0.36%)</title><rect x="7.4784%" y="437" width="0.3550%" height="15" fill="rgb(241,131,45)" fg:x="1622" fg:w="77"/><text x="7.7284%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (139 samples, 0.64%)</title><rect x="7.8335%" y="437" width="0.6409%" height="15" fill="rgb(249,31,29)" fg:x="1699" fg:w="139"/><text x="8.0835%" y="447.50"></text></g><g><title>cfree (48 samples, 0.22%)</title><rect x="8.4743%" y="437" width="0.2213%" height="15" fill="rgb(225,111,53)" fg:x="1838" fg:w="48"/><text x="8.7243%" y="447.50"></text></g><g><title>malachite_base::num::conversion::digits::general_digits::to_digits_asc (93 samples, 0.43%)</title><rect x="8.6957%" y="437" width="0.4288%" height="15" fill="rgb(238,160,17)" fg:x="1886" fg:w="93"/><text x="8.9457%" y="447.50"></text></g><g><title>malachite_nz::natural::arithmetic::div_mod::limbs_div_mod_extra_in_place (48 samples, 0.22%)</title><rect x="9.1244%" y="437" width="0.2213%" height="15" fill="rgb(214,148,48)" fg:x="1979" fg:w="48"/><text x="9.3744%" y="447.50"></text></g><g><title>malachite_nz::natural::arithmetic::mul::&lt;impl core::ops::arith::MulAssign for malachite_nz::natural::Natural&gt;::mul_assign (30 samples, 0.14%)</title><rect x="9.3458%" y="437" width="0.1383%" height="15" fill="rgb(232,36,49)" fg:x="2027" fg:w="30"/><text x="9.5958%" y="447.50"></text></g><g><title>malachite_nz::natural::conversion::digits::general_digits::limbs_to_digits_small_base_basecase (19 samples, 0.09%)</title><rect x="9.4933%" y="437" width="0.0876%" height="15" fill="rgb(209,103,24)" fg:x="2059" fg:w="19"/><text x="9.7433%" y="447.50"></text></g><g><title>malachite_nz::natural::conversion::digits::general_digits::to_digits_asc_unsigned (239 samples, 1.10%)</title><rect x="9.5809%" y="437" width="1.1019%" height="15" fill="rgb(229,88,8)" fg:x="2078" fg:w="239"/><text x="9.8309%" y="447.50"></text></g><g><title>malachite_nz::natural::conversion::from_limbs::&lt;impl malachite_nz::natural::Natural&gt;::from_owned_limbs_asc (44 samples, 0.20%)</title><rect x="10.6828%" y="437" width="0.2029%" height="15" fill="rgb(213,181,19)" fg:x="2317" fg:w="44"/><text x="10.9328%" y="447.50"></text></g><g><title>nice_rust::get_num_uniques (139 samples, 0.64%)</title><rect x="10.8857%" y="437" width="0.6409%" height="15" fill="rgb(254,191,54)" fg:x="2361" fg:w="139"/><text x="11.1357%" y="447.50"></text></g><g><title>nice_rust::main (10 samples, 0.05%)</title><rect x="11.5266%" y="437" width="0.0461%" height="15" fill="rgb(241,83,37)" fg:x="2500" fg:w="10"/><text x="11.7766%" y="447.50"></text></g><g><title>[unknown] (1,973 samples, 9.10%)</title><rect x="3.1583%" y="453" width="9.0968%" height="15" fill="rgb(233,36,39)" fg:x="685" fg:w="1973"/><text x="3.4083%" y="463.50">[unknown]</text></g><g><title>realloc (148 samples, 0.68%)</title><rect x="11.5727%" y="437" width="0.6824%" height="15" fill="rgb(226,3,54)" fg:x="2510" fg:w="148"/><text x="11.8227%" y="447.50"></text></g><g><title>__libc_calloc (12 samples, 0.06%)</title><rect x="12.2551%" y="453" width="0.0553%" height="15" fill="rgb(245,192,40)" fg:x="2658" fg:w="12"/><text x="12.5051%" y="463.50"></text></g><g><title>__libc_malloc (23 samples, 0.11%)</title><rect x="12.3104%" y="453" width="0.1060%" height="15" fill="rgb(238,167,29)" fg:x="2670" fg:w="23"/><text x="12.5604%" y="463.50"></text></g><g><title>__rdl_alloc_zeroed (7 samples, 0.03%)</title><rect x="12.4210%" y="453" width="0.0323%" height="15" fill="rgb(232,182,51)" fg:x="2694" fg:w="7"/><text x="12.6710%" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (7 samples, 0.03%)</title><rect x="12.4210%" y="437" width="0.0323%" height="15" fill="rgb(231,60,39)" fg:x="2694" fg:w="7"/><text x="12.6710%" y="447.50"></text></g><g><title>__libc_calloc (445 samples, 2.05%)</title><rect x="13.0896%" y="213" width="2.0517%" height="15" fill="rgb(208,69,12)" fg:x="2839" fg:w="445"/><text x="13.3396%" y="223.50">_..</text></g><g><title>[libc-2.31.so] (218 samples, 1.01%)</title><rect x="14.1362%" y="197" width="1.0051%" height="15" fill="rgb(235,93,37)" fg:x="3066" fg:w="218"/><text x="14.3862%" y="207.50"></text></g><g><title>__rdl_alloc_zeroed (45 samples, 0.21%)</title><rect x="15.1413%" y="213" width="0.2075%" height="15" fill="rgb(213,116,39)" fg:x="3284" fg:w="45"/><text x="15.3913%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (32 samples, 0.15%)</title><rect x="15.2013%" y="197" width="0.1475%" height="15" fill="rgb(222,207,29)" fg:x="3297" fg:w="32"/><text x="15.4513%" y="207.50"></text></g><g><title>__rust_alloc_zeroed (5 samples, 0.02%)</title><rect x="15.3488%" y="213" width="0.0231%" height="15" fill="rgb(206,96,30)" fg:x="3329" fg:w="5"/><text x="15.5988%" y="223.50"></text></g><g><title>[libc-2.31.so] (281 samples, 1.30%)</title><rect x="15.9482%" y="197" width="1.2956%" height="15" fill="rgb(218,138,4)" fg:x="3459" fg:w="281"/><text x="16.1982%" y="207.50"></text></g><g><title>__rdl_dealloc (6 samples, 0.03%)</title><rect x="17.2438%" y="197" width="0.0277%" height="15" fill="rgb(250,191,14)" fg:x="3740" fg:w="6"/><text x="17.4938%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (6 samples, 0.03%)</title><rect x="17.2438%" y="181" width="0.0277%" height="15" fill="rgb(239,60,40)" fg:x="3740" fg:w="6"/><text x="17.4938%" y="191.50"></text></g><g><title>__rust_dealloc (9 samples, 0.04%)</title><rect x="17.2714%" y="197" width="0.0415%" height="15" fill="rgb(206,27,48)" fg:x="3746" fg:w="9"/><text x="17.5214%" y="207.50"></text></g><g><title>malachite_nz::natural::conversion::from_limbs::&lt;impl malachite_nz::natural::Natural&gt;::from_owned_limbs_asc (494 samples, 2.28%)</title><rect x="15.3718%" y="213" width="2.2777%" height="15" fill="rgb(225,35,8)" fg:x="3334" fg:w="494"/><text x="15.6218%" y="223.50">m..</text></g><g><title>cfree (72 samples, 0.33%)</title><rect x="17.3175%" y="197" width="0.3320%" height="15" fill="rgb(250,213,24)" fg:x="3756" fg:w="72"/><text x="17.5675%" y="207.50"></text></g><g><title>[libc-2.31.so] (817 samples, 3.77%)</title><rect x="24.0398%" y="197" width="3.7669%" height="15" fill="rgb(247,123,22)" fg:x="5214" fg:w="817"/><text x="24.2898%" y="207.50">[lib..</text></g><g><title>__libc_calloc (476 samples, 2.19%)</title><rect x="27.8067%" y="197" width="2.1947%" height="15" fill="rgb(231,138,38)" fg:x="6031" fg:w="476"/><text x="28.0567%" y="207.50">_..</text></g><g><title>[libc-2.31.so] (211 samples, 0.97%)</title><rect x="29.0285%" y="181" width="0.9728%" height="15" fill="rgb(231,145,46)" fg:x="6296" fg:w="211"/><text x="29.2785%" y="191.50"></text></g><g><title>__rdl_alloc_zeroed (31 samples, 0.14%)</title><rect x="30.0014%" y="197" width="0.1429%" height="15" fill="rgb(251,118,11)" fg:x="6507" fg:w="31"/><text x="30.2514%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (13 samples, 0.06%)</title><rect x="30.0844%" y="181" width="0.0599%" height="15" fill="rgb(217,147,25)" fg:x="6525" fg:w="13"/><text x="30.3344%" y="191.50"></text></g><g><title>__rdl_dealloc (15 samples, 0.07%)</title><rect x="30.1443%" y="197" width="0.0692%" height="15" fill="rgb(247,81,37)" fg:x="6538" fg:w="15"/><text x="30.3943%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (15 samples, 0.07%)</title><rect x="30.1443%" y="181" width="0.0692%" height="15" fill="rgb(209,12,38)" fg:x="6538" fg:w="15"/><text x="30.3943%" y="191.50"></text></g><g><title>__rust_alloc_zeroed (3 samples, 0.01%)</title><rect x="30.2135%" y="197" width="0.0138%" height="15" fill="rgb(227,1,9)" fg:x="6553" fg:w="3"/><text x="30.4635%" y="207.50"></text></g><g><title>__rust_dealloc (17 samples, 0.08%)</title><rect x="30.2273%" y="197" width="0.0784%" height="15" fill="rgb(248,47,43)" fg:x="6556" fg:w="17"/><text x="30.4773%" y="207.50"></text></g><g><title>cfree (223 samples, 1.03%)</title><rect x="30.3057%" y="197" width="1.0282%" height="15" fill="rgb(221,10,30)" fg:x="6573" fg:w="223"/><text x="30.5557%" y="207.50"></text></g><g><title>__libc_malloc (135 samples, 0.62%)</title><rect x="32.1730%" y="165" width="0.6224%" height="15" fill="rgb(210,229,1)" fg:x="6978" fg:w="135"/><text x="32.4230%" y="175.50"></text></g><g><title>__rdl_alloc (23 samples, 0.11%)</title><rect x="32.7954%" y="165" width="0.1060%" height="15" fill="rgb(222,148,37)" fg:x="7113" fg:w="23"/><text x="33.0454%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (23 samples, 0.11%)</title><rect x="32.7954%" y="149" width="0.1060%" height="15" fill="rgb(234,67,33)" fg:x="7113" fg:w="23"/><text x="33.0454%" y="159.50"></text></g><g><title>malachite_nz::natural::arithmetic::mul::&lt;impl core::ops::arith::MulAssign for malachite_nz::natural::Natural&gt;::mul_assign (349 samples, 1.61%)</title><rect x="31.3339%" y="197" width="1.6091%" height="15" fill="rgb(247,98,35)" fg:x="6796" fg:w="349"/><text x="31.5839%" y="207.50"></text></g><g><title>malachite_nz::natural::arithmetic::mul::limb::&lt;impl malachite_nz::natural::Natural&gt;::mul_assign_limb (288 samples, 1.33%)</title><rect x="31.6151%" y="181" width="1.3279%" height="15" fill="rgb(247,138,52)" fg:x="6857" fg:w="288"/><text x="31.8651%" y="191.50"></text></g><g><title>__rust_alloc (9 samples, 0.04%)</title><rect x="32.9015%" y="165" width="0.0415%" height="15" fill="rgb(213,79,30)" fg:x="7136" fg:w="9"/><text x="33.1515%" y="175.50"></text></g><g><title>[libc-2.31.so] (260 samples, 1.20%)</title><rect x="36.7421%" y="181" width="1.1988%" height="15" fill="rgb(246,177,23)" fg:x="7969" fg:w="260"/><text x="36.9921%" y="191.50"></text></g><g><title>__libc_calloc (401 samples, 1.85%)</title><rect x="37.9409%" y="181" width="1.8489%" height="15" fill="rgb(230,62,27)" fg:x="8229" fg:w="401"/><text x="38.1909%" y="191.50">_..</text></g><g><title>[libc-2.31.so] (152 samples, 0.70%)</title><rect x="39.0889%" y="165" width="0.7008%" height="15" fill="rgb(216,154,8)" fg:x="8478" fg:w="152"/><text x="39.3389%" y="175.50"></text></g><g><title>__libc_malloc (121 samples, 0.56%)</title><rect x="39.7898%" y="181" width="0.5579%" height="15" fill="rgb(244,35,45)" fg:x="8630" fg:w="121"/><text x="40.0398%" y="191.50"></text></g><g><title>__rdl_alloc (19 samples, 0.09%)</title><rect x="40.3476%" y="181" width="0.0876%" height="15" fill="rgb(251,115,12)" fg:x="8751" fg:w="19"/><text x="40.5976%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (16 samples, 0.07%)</title><rect x="40.3615%" y="165" width="0.0738%" height="15" fill="rgb(240,54,50)" fg:x="8754" fg:w="16"/><text x="40.6115%" y="175.50"></text></g><g><title>__rdl_alloc_zeroed (38 samples, 0.18%)</title><rect x="40.4352%" y="181" width="0.1752%" height="15" fill="rgb(233,84,52)" fg:x="8770" fg:w="38"/><text x="40.6852%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (25 samples, 0.12%)</title><rect x="40.4952%" y="165" width="0.1153%" height="15" fill="rgb(207,117,47)" fg:x="8783" fg:w="25"/><text x="40.7452%" y="175.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.01%)</title><rect x="40.6104%" y="181" width="0.0138%" height="15" fill="rgb(249,43,39)" fg:x="8808" fg:w="3"/><text x="40.8604%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.01%)</title><rect x="40.6104%" y="165" width="0.0138%" height="15" fill="rgb(209,38,44)" fg:x="8808" fg:w="3"/><text x="40.8604%" y="175.50"></text></g><g><title>__rust_alloc (7 samples, 0.03%)</title><rect x="40.6243%" y="181" width="0.0323%" height="15" fill="rgb(236,212,23)" fg:x="8811" fg:w="7"/><text x="40.8743%" y="191.50"></text></g><g><title>__rust_alloc_zeroed (9 samples, 0.04%)</title><rect x="40.6566%" y="181" width="0.0415%" height="15" fill="rgb(242,79,21)" fg:x="8818" fg:w="9"/><text x="40.9066%" y="191.50"></text></g><g><title>__rust_dealloc (5 samples, 0.02%)</title><rect x="40.6980%" y="181" width="0.0231%" height="15" fill="rgb(211,96,35)" fg:x="8827" fg:w="5"/><text x="40.9480%" y="191.50"></text></g><g><title>cfree (90 samples, 0.41%)</title><rect x="40.7211%" y="181" width="0.4150%" height="15" fill="rgb(253,215,40)" fg:x="8832" fg:w="90"/><text x="40.9711%" y="191.50"></text></g><g><title>__libc_malloc (291 samples, 1.34%)</title><rect x="55.1893%" y="133" width="1.3417%" height="15" fill="rgb(211,81,21)" fg:x="11970" fg:w="291"/><text x="55.4393%" y="143.50"></text></g><g><title>__rdl_alloc (91 samples, 0.42%)</title><rect x="56.5310%" y="133" width="0.4196%" height="15" fill="rgb(208,190,38)" fg:x="12261" fg:w="91"/><text x="56.7810%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (87 samples, 0.40%)</title><rect x="56.5494%" y="117" width="0.4011%" height="15" fill="rgb(235,213,38)" fg:x="12265" fg:w="87"/><text x="56.7994%" y="127.50"></text></g><g><title>__rdl_realloc (178 samples, 0.82%)</title><rect x="56.9505%" y="133" width="0.8207%" height="15" fill="rgb(237,122,38)" fg:x="12352" fg:w="178"/><text x="57.2005%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (111 samples, 0.51%)</title><rect x="57.2594%" y="117" width="0.5118%" height="15" fill="rgb(244,218,35)" fg:x="12419" fg:w="111"/><text x="57.5094%" y="127.50"></text></g><g><title>__rust_alloc (47 samples, 0.22%)</title><rect x="57.7712%" y="133" width="0.2167%" height="15" fill="rgb(240,68,47)" fg:x="12530" fg:w="47"/><text x="58.0212%" y="143.50"></text></g><g><title>__rust_realloc (20 samples, 0.09%)</title><rect x="57.9879%" y="133" width="0.0922%" height="15" fill="rgb(210,16,53)" fg:x="12577" fg:w="20"/><text x="58.2379%" y="143.50"></text></g><g><title>@plt (6 samples, 0.03%)</title><rect x="62.0868%" y="101" width="0.0277%" height="15" fill="rgb(235,124,12)" fg:x="13466" fg:w="6"/><text x="62.3368%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3,246 samples, 14.97%)</title><rect x="50.7170%" y="165" width="14.9661%" height="15" fill="rgb(224,169,11)" fg:x="11000" fg:w="3246"/><text x="50.9670%" y="175.50">alloc::raw_vec::RawVec&lt;..</text></g><g><title>alloc::raw_vec::finish_grow (2,680 samples, 12.36%)</title><rect x="53.3266%" y="149" width="12.3565%" height="15" fill="rgb(250,166,2)" fg:x="11566" fg:w="2680"/><text x="53.5766%" y="159.50">alloc::raw_vec::fi..</text></g><g><title>realloc (1,649 samples, 7.60%)</title><rect x="58.0801%" y="133" width="7.6029%" height="15" fill="rgb(242,216,29)" fg:x="12597" fg:w="1649"/><text x="58.3301%" y="143.50">realloc</text></g><g><title>[libc-2.31.so] (1,071 samples, 4.94%)</title><rect x="60.7451%" y="117" width="4.9380%" height="15" fill="rgb(230,116,27)" fg:x="13175" fg:w="1071"/><text x="60.9951%" y="127.50">[libc-..</text></g><g><title>[libc-2.31.so] (774 samples, 3.57%)</title><rect x="62.1144%" y="101" width="3.5686%" height="15" fill="rgb(228,99,48)" fg:x="13472" fg:w="774"/><text x="62.3644%" y="111.50">[lib..</text></g><g><title>[libc-2.31.so] (148 samples, 0.68%)</title><rect x="65.0007%" y="85" width="0.6824%" height="15" fill="rgb(253,11,6)" fg:x="14098" fg:w="148"/><text x="65.2507%" y="95.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.02%)</title><rect x="65.6831%" y="149" width="0.0231%" height="15" fill="rgb(247,143,39)" fg:x="14246" fg:w="5"/><text x="65.9331%" y="159.50"></text></g><g><title>exit_to_user_mode_prepare (5 samples, 0.02%)</title><rect x="65.6831%" y="133" width="0.0231%" height="15" fill="rgb(236,97,10)" fg:x="14246" fg:w="5"/><text x="65.9331%" y="143.50"></text></g><g><title>schedule (5 samples, 0.02%)</title><rect x="65.6831%" y="117" width="0.0231%" height="15" fill="rgb(233,208,19)" fg:x="14246" fg:w="5"/><text x="65.9331%" y="127.50"></text></g><g><title>__schedule (5 samples, 0.02%)</title><rect x="65.6831%" y="101" width="0.0231%" height="15" fill="rgb(216,164,2)" fg:x="14246" fg:w="5"/><text x="65.9331%" y="111.50"></text></g><g><title>finish_task_switch (5 samples, 0.02%)</title><rect x="65.6831%" y="85" width="0.0231%" height="15" fill="rgb(220,129,5)" fg:x="14246" fg:w="5"/><text x="65.9331%" y="95.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.02%)</title><rect x="65.6831%" y="69" width="0.0231%" height="15" fill="rgb(242,17,10)" fg:x="14246" fg:w="5"/><text x="65.9331%" y="79.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 0.02%)</title><rect x="65.6831%" y="53" width="0.0231%" height="15" fill="rgb(242,107,0)" fg:x="14246" fg:w="5"/><text x="65.9331%" y="63.50"></text></g><g><title>native_write_msr (5 samples, 0.02%)</title><rect x="65.6831%" y="37" width="0.0231%" height="15" fill="rgb(251,28,31)" fg:x="14246" fg:w="5"/><text x="65.9331%" y="47.50"></text></g><g><title>malachite_base::num::conversion::digits::general_digits::to_digits_asc (5,332 samples, 24.58%)</title><rect x="41.1361%" y="181" width="24.5839%" height="15" fill="rgb(233,223,10)" fg:x="8922" fg:w="5332"/><text x="41.3861%" y="191.50">malachite_base::num::conversion::digits..</text></g><g><title>asm_sysvec_apic_timer_interrupt (8 samples, 0.04%)</title><rect x="65.6831%" y="165" width="0.0369%" height="15" fill="rgb(215,21,27)" fg:x="14246" fg:w="8"/><text x="65.9331%" y="175.50"></text></g><g><title>sysvec_apic_timer_interrupt (3 samples, 0.01%)</title><rect x="65.7061%" y="149" width="0.0138%" height="15" fill="rgb(232,23,21)" fg:x="14251" fg:w="3"/><text x="65.9561%" y="159.50"></text></g><g><title>malachite_nz::natural::conversion::digits::general_digits::limbs_digit_count (184 samples, 0.85%)</title><rect x="65.7200%" y="181" width="0.8484%" height="15" fill="rgb(244,5,23)" fg:x="14254" fg:w="184"/><text x="65.9700%" y="191.50"></text></g><g><title>[libc-2.31.so] (4,904 samples, 22.61%)</title><rect x="74.4433%" y="165" width="22.6105%" height="15" fill="rgb(226,81,46)" fg:x="16146" fg:w="4904"/><text x="74.6933%" y="175.50">[libc-2.31.so]</text></g><g><title>__rust_probestack (73 samples, 0.34%)</title><rect x="97.0538%" y="165" width="0.3366%" height="15" fill="rgb(247,70,30)" fg:x="21050" fg:w="73"/><text x="97.3038%" y="175.50"></text></g><g><title>__hrtimer_run_queues (4 samples, 0.02%)</title><rect x="97.3904%" y="101" width="0.0184%" height="15" fill="rgb(212,68,19)" fg:x="21123" fg:w="4"/><text x="97.6404%" y="111.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (5 samples, 0.02%)</title><rect x="97.3904%" y="165" width="0.0231%" height="15" fill="rgb(240,187,13)" fg:x="21123" fg:w="5"/><text x="97.6404%" y="175.50"></text></g><g><title>sysvec_apic_timer_interrupt (5 samples, 0.02%)</title><rect x="97.3904%" y="149" width="0.0231%" height="15" fill="rgb(223,113,26)" fg:x="21123" fg:w="5"/><text x="97.6404%" y="159.50"></text></g><g><title>__sysvec_apic_timer_interrupt (5 samples, 0.02%)</title><rect x="97.3904%" y="133" width="0.0231%" height="15" fill="rgb(206,192,2)" fg:x="21123" fg:w="5"/><text x="97.6404%" y="143.50"></text></g><g><title>hrtimer_interrupt (5 samples, 0.02%)</title><rect x="97.3904%" y="117" width="0.0231%" height="15" fill="rgb(241,108,4)" fg:x="21123" fg:w="5"/><text x="97.6404%" y="127.50"></text></g><g><title>malachite_nz::natural::arithmetic::div_mod::limbs_div_mod_extra_in_place (304 samples, 1.40%)</title><rect x="97.4180%" y="165" width="1.4016%" height="15" fill="rgb(247,173,49)" fg:x="21129" fg:w="304"/><text x="97.6680%" y="175.50"></text></g><g><title>malachite_nz::natural::conversion::digits::general_digits::get_big_base (52 samples, 0.24%)</title><rect x="98.8197%" y="165" width="0.2398%" height="15" fill="rgb(224,114,35)" fg:x="21433" fg:w="52"/><text x="99.0697%" y="175.50"></text></g><g><title>malachite_nz::natural::conversion::digits::general_digits::get_big_base_inverted (62 samples, 0.29%)</title><rect x="99.0594%" y="165" width="0.2859%" height="15" fill="rgb(245,159,27)" fg:x="21485" fg:w="62"/><text x="99.3094%" y="175.50"></text></g><g><title>_start (18,923 samples, 87.25%)</title><rect x="12.4533%" y="453" width="87.2470%" height="15" fill="rgb(245,172,44)" fg:x="2701" fg:w="18923"/><text x="12.7033%" y="463.50">_start</text></g><g><title>__libc_start_main (18,923 samples, 87.25%)</title><rect x="12.4533%" y="437" width="87.2470%" height="15" fill="rgb(236,23,11)" fg:x="2701" fg:w="18923"/><text x="12.7033%" y="447.50">__libc_start_main</text></g><g><title>main (18,923 samples, 87.25%)</title><rect x="12.4533%" y="421" width="87.2470%" height="15" fill="rgb(205,117,38)" fg:x="2701" fg:w="18923"/><text x="12.7033%" y="431.50">main</text></g><g><title>std::rt::lang_start_internal (18,923 samples, 87.25%)</title><rect x="12.4533%" y="405" width="87.2470%" height="15" fill="rgb(237,72,25)" fg:x="2701" fg:w="18923"/><text x="12.7033%" y="415.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (18,923 samples, 87.25%)</title><rect x="12.4533%" y="389" width="87.2470%" height="15" fill="rgb(244,70,9)" fg:x="2701" fg:w="18923"/><text x="12.7033%" y="399.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (18,923 samples, 87.25%)</title><rect x="12.4533%" y="373" width="87.2470%" height="15" fill="rgb(217,125,39)" fg:x="2701" fg:w="18923"/><text x="12.7033%" y="383.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (18,923 samples, 87.25%)</title><rect x="12.4533%" y="357" width="87.2470%" height="15" fill="rgb(235,36,10)" fg:x="2701" fg:w="18923"/><text x="12.7033%" y="367.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (18,923 samples, 87.25%)</title><rect x="12.4533%" y="341" width="87.2470%" height="15" fill="rgb(251,123,47)" fg:x="2701" fg:w="18923"/><text x="12.7033%" y="351.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (18,923 samples, 87.25%)</title><rect x="12.4533%" y="325" width="87.2470%" height="15" fill="rgb(221,13,13)" fg:x="2701" fg:w="18923"/><text x="12.7033%" y="335.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (18,923 samples, 87.25%)</title><rect x="12.4533%" y="309" width="87.2470%" height="15" fill="rgb(238,131,9)" fg:x="2701" fg:w="18923"/><text x="12.7033%" y="319.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (18,923 samples, 87.25%)</title><rect x="12.4533%" y="293" width="87.2470%" height="15" fill="rgb(211,50,8)" fg:x="2701" fg:w="18923"/><text x="12.7033%" y="303.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (18,923 samples, 87.25%)</title><rect x="12.4533%" y="277" width="87.2470%" height="15" fill="rgb(245,182,24)" fg:x="2701" fg:w="18923"/><text x="12.7033%" y="287.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (18,923 samples, 87.25%)</title><rect x="12.4533%" y="261" width="87.2470%" height="15" fill="rgb(242,14,37)" fg:x="2701" fg:w="18923"/><text x="12.7033%" y="271.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (18,923 samples, 87.25%)</title><rect x="12.4533%" y="245" width="87.2470%" height="15" fill="rgb(246,228,12)" fg:x="2701" fg:w="18923"/><text x="12.7033%" y="255.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>nice_rust::main (18,923 samples, 87.25%)</title><rect x="12.4533%" y="229" width="87.2470%" height="15" fill="rgb(213,55,15)" fg:x="2701" fg:w="18923"/><text x="12.7033%" y="239.50">nice_rust::main</text></g><g><title>nice_rust::get_num_uniques (17,796 samples, 82.05%)</title><rect x="17.6495%" y="213" width="82.0508%" height="15" fill="rgb(209,9,3)" fg:x="3828" fg:w="17796"/><text x="17.8995%" y="223.50">nice_rust::get_num_uniques</text></g><g><title>malachite_nz::natural::conversion::digits::general_digits::to_digits_asc_unsigned (14,479 samples, 66.76%)</title><rect x="32.9430%" y="197" width="66.7573%" height="15" fill="rgb(230,59,30)" fg:x="7145" fg:w="14479"/><text x="33.1930%" y="207.50">malachite_nz::natural::conversion::digits::general_digits::to_digits_asc_unsigned</text></g><g><title>malachite_nz::natural::conversion::digits::general_digits::limbs_to_digits_small_base_basecase (7,186 samples, 33.13%)</title><rect x="66.5683%" y="181" width="33.1320%" height="15" fill="rgb(209,121,21)" fg:x="14438" fg:w="7186"/><text x="66.8183%" y="191.50">malachite_nz::natural::conversion::digits::general_dig..</text></g><g><title>malachite_nz::natural::conversion::digits::general_digits::get_chars_per_limb (77 samples, 0.36%)</title><rect x="99.3453%" y="165" width="0.3550%" height="15" fill="rgb(220,109,13)" fg:x="21547" fg:w="77"/><text x="99.5953%" y="175.50"></text></g><g><title>malachite_base::num::conversion::digits::general_digits::to_digits_asc (29 samples, 0.13%)</title><rect x="99.7141%" y="453" width="0.1337%" height="15" fill="rgb(232,18,1)" fg:x="21627" fg:w="29"/><text x="99.9641%" y="463.50"></text></g><g><title>nice-rust (21,684 samples, 99.98%)</title><rect x="0.0000%" y="469" width="99.9769%" height="15" fill="rgb(215,41,42)" fg:x="0" fg:w="21684"/><text x="0.2500%" y="479.50">nice-rust</text></g><g><title>malachite_nz::natural::conversion::digits::general_digits::limbs_to_digits_small_base_basecase (28 samples, 0.13%)</title><rect x="99.8478%" y="453" width="0.1291%" height="15" fill="rgb(224,123,36)" fg:x="21656" fg:w="28"/><text x="100.0978%" y="463.50"></text></g><g><title>all (21,689 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(240,125,3)" fg:x="0" fg:w="21689"/><text x="0.2500%" y="495.50"></text></g><g><title>perf_5.10 (5 samples, 0.02%)</title><rect x="99.9769%" y="469" width="0.0231%" height="15" fill="rgb(205,98,50)" fg:x="21684" fg:w="5"/><text x="100.2269%" y="479.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.02%)</title><rect x="99.9769%" y="453" width="0.0231%" height="15" fill="rgb(205,185,37)" fg:x="21684" fg:w="5"/><text x="100.2269%" y="463.50"></text></g><g><title>do_syscall_64 (5 samples, 0.02%)</title><rect x="99.9769%" y="437" width="0.0231%" height="15" fill="rgb(238,207,15)" fg:x="21684" fg:w="5"/><text x="100.2269%" y="447.50"></text></g><g><title>__x64_sys_execve (5 samples, 0.02%)</title><rect x="99.9769%" y="421" width="0.0231%" height="15" fill="rgb(213,199,42)" fg:x="21684" fg:w="5"/><text x="100.2269%" y="431.50"></text></g><g><title>do_execveat_common (5 samples, 0.02%)</title><rect x="99.9769%" y="405" width="0.0231%" height="15" fill="rgb(235,201,11)" fg:x="21684" fg:w="5"/><text x="100.2269%" y="415.50"></text></g><g><title>bprm_execve (5 samples, 0.02%)</title><rect x="99.9769%" y="389" width="0.0231%" height="15" fill="rgb(207,46,11)" fg:x="21684" fg:w="5"/><text x="100.2269%" y="399.50"></text></g><g><title>load_elf_binary (5 samples, 0.02%)</title><rect x="99.9769%" y="373" width="0.0231%" height="15" fill="rgb(241,35,35)" fg:x="21684" fg:w="5"/><text x="100.2269%" y="383.50"></text></g><g><title>begin_new_exec (5 samples, 0.02%)</title><rect x="99.9769%" y="357" width="0.0231%" height="15" fill="rgb(243,32,47)" fg:x="21684" fg:w="5"/><text x="100.2269%" y="367.50"></text></g><g><title>perf_event_exec (5 samples, 0.02%)</title><rect x="99.9769%" y="341" width="0.0231%" height="15" fill="rgb(247,202,23)" fg:x="21684" fg:w="5"/><text x="100.2269%" y="351.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 0.02%)</title><rect x="99.9769%" y="325" width="0.0231%" height="15" fill="rgb(219,102,11)" fg:x="21684" fg:w="5"/><text x="100.2269%" y="335.50"></text></g><g><title>native_write_msr (5 samples, 0.02%)</title><rect x="99.9769%" y="309" width="0.0231%" height="15" fill="rgb(243,110,44)" fg:x="21684" fg:w="5"/><text x="100.2269%" y="319.50"></text></g></svg></svg>