name: Rust Cross-Platform Build and Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  OUTPUT_PREFIX: nice
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    name: ${{ matrix.platform.build_name }}
    runs-on: ${{ matrix.platform.os }}

    strategy:
      fail-fast: false
      matrix:
        platform:

          - build_name: Linux-x86_64
            os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            save_output: true

          - build_name: Linux-x86_64-musl
            os: ubuntu-20.04
            target: x86_64-unknown-linux-musl
            save_output: false

          - build_name: Linux-aarch64
            os: ubuntu-20.04
            target: aarch64-unknown-linux-gnu
            save_output: true

          - build_name: Linux-aarch64-musl
            os: ubuntu-20.04
            target: aarch64-unknown-linux-musl
            save_output: false

          - build_name: Linux-armv7
            os: ubuntu-20.04
            target: armv7-unknown-linux-gnueabihf
            save_output: true

          - build_name: Linux-arm-musl
            os: ubuntu-20.04
            target: arm-unknown-linux-musleabi
            save_output: false

          - build_name: Linux-riscv64gc
            os: ubuntu-20.04
            target: riscv64gc-unknown-linux-gnu
            save_output: false

          - build_name: Windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            save_output: true

          - build_name: Darwin-x86_64
            os: macOS-latest
            target: x86_64-apple-darwin
            save_output: true

    steps:
      - uses: actions/checkout@v4
      
      - name: Cache cargo & target directories
        uses: Swatinem/rust-cache@v2
      
      - name: Install musl-tools on Linux
        run: sudo apt-get update --yes && sudo apt-get install --yes musl-tools
        if: contains(matrix.platform.target, 'musl')
      
      - name: Build binary
        uses: houseabsolute/actions-rust-cross@v0
        with:
          command: "build"
          target: ${{ matrix.platform.target }}
          toolchain: stable
          args: "--locked --release"
          strip: true
      
      - name: Run tests
        uses: houseabsolute/actions-rust-cross@v0
        with:
          command: "test"
          target: ${{ matrix.platform.target }}
          toolchain: stable
          args: "--locked --release"
      
      - name: Package as archive (Linux)
        if: ${{ matrix.platform.save_output && matrix.platform.os != 'windows-latest' }}
        id: archive_linux
        shell: bash
        run: |
          version=$(cat Cargo.toml | grep -o 'version = "[^"]*' | sed 's/version = "//' | head -1)
          filename="${{ env.OUTPUT_PREFIX }}-$version-${{ matrix.platform.build_name }}"
          echo "filename=$filename" >> $GITHUB_OUTPUT
          cd target/${{ matrix.platform.target }}/release
          tar czvf ../../../$filename.tar.gz nice-rust
          cd -
      
      - name: Package as archive (Windows)
        if: ${{ matrix.platform.save_output && matrix.platform.os == 'windows-latest' }}
        id: archive_windows
        shell: pwsh
        run: |
          $version = (Get-Content Cargo.toml | Select-String -Pattern 'version = "(.+)"').Matches.Groups[1].Value
          $filename = "${{ env.OUTPUT_PREFIX }}-$version-${{ matrix.platform.build_name }}"
          echo "filename=$filename" >> $env:GITHUB_OUTPUT
          cd target/${{ matrix.platform.target }}/release
          7z a ../../../$filename.zip nice-rust.exe
          cd -
      
      - name: Publish release artifacts
        if: ${{ matrix.platform.save_output }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.platform.os == 'windows-latest' && steps.archive_windows.outputs.filename || steps.archive_linux.outputs.filename }}
          path: "${{ env.OUTPUT_PREFIX }}-*"
          retention-days: 30
